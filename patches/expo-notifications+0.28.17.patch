diff --git a/node_modules/expo-notifications/build/Notifications.types.d.ts b/node_modules/expo-notifications/build/Notifications.types.d.ts
index 0256439..1d3e1d7 100644
--- a/node_modules/expo-notifications/build/Notifications.types.d.ts
+++ b/node_modules/expo-notifications/build/Notifications.types.d.ts
@@ -235,12 +235,24 @@ export type CalendarTriggerInputValue = {
     minute?: number;
     second?: number;
 };
+/**
+ * Calendar trigger inputs must have the "type" property set to one of these values
+ */
+export declare enum CalendarTriggerTypes {
+    CALENDAR = "calendar",
+    DAILY = "daily",
+    WEEKLY = "weekly",
+    YEARLY = "yearly",
+    DATE = "date",
+    TIME_INTERVAL = "timeInterval"
+}
 /**
  * A trigger that will cause the notification to be delivered once or many times when the date components match the specified values.
  * Corresponds to native [`UNCalendarNotificationTrigger`](https://developer.apple.com/documentation/usernotifications/uncalendarnotificationtrigger?language=objc).
  * @platform ios
  */
 export type CalendarTriggerInput = CalendarTriggerInputValue & {
+    type: CalendarTriggerTypes.CALENDAR;
     channelId?: string;
     repeats?: boolean;
 };
@@ -249,6 +261,7 @@ export type CalendarTriggerInput = CalendarTriggerInputValue & {
  * > **On iOS**, when `repeats` is `true`, the time interval must be 60 seconds or greater. Otherwise, the notification won't be triggered.
  */
 export interface TimeIntervalTriggerInput {
+    type: CalendarTriggerTypes.TIME_INTERVAL;
     channelId?: string;
     repeats?: boolean;
     seconds: number;
@@ -257,39 +270,40 @@ export interface TimeIntervalTriggerInput {
  * A trigger that will cause the notification to be delivered once per day.
  */
 export interface DailyTriggerInput {
+    type: CalendarTriggerTypes.DAILY;
     channelId?: string;
     hour: number;
     minute: number;
-    repeats: true;
 }
 /**
  * A trigger that will cause the notification to be delivered once every week.
  * > **Note:** Weekdays are specified with a number from `1` through `7`, with `1` indicating Sunday.
  */
 export interface WeeklyTriggerInput {
+    type: CalendarTriggerTypes.WEEKLY;
     channelId?: string;
     weekday: number;
     hour: number;
     minute: number;
-    repeats: true;
 }
 /**
  * A trigger that will cause the notification to be delivered once every year.
  * > **Note:** all properties are specified in JavaScript Date's ranges.
  */
 export interface YearlyTriggerInput {
+    type: CalendarTriggerTypes.YEARLY;
     channelId?: string;
     day: number;
     month: number;
     hour: number;
     minute: number;
-    repeats: true;
 }
 /**
  * A trigger that will cause the notification to be delivered once at the specified `Date`.
  * If you pass in a `number` it will be interpreted as a Unix timestamp.
  */
 export type DateTriggerInput = Date | number | {
+    type: CalendarTriggerTypes.DATE;
     channelId?: string;
     date: Date | number;
 };
diff --git a/node_modules/expo-notifications/build/Notifications.types.d.ts.map b/node_modules/expo-notifications/build/Notifications.types.d.ts.map
index de39cdd..8c18eae 100644
--- a/node_modules/expo-notifications/build/Notifications.types.d.ts.map
+++ b/node_modules/expo-notifications/build/Notifications.types.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"Notifications.types.d.ts","sourceRoot":"","sources":["../src/Notifications.types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"Notifications.types.d.ts","sourceRoot":"","sources":["../src/Notifications.types.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,oBAAoB,EACpB,kBAAkB,EAClB,gBAAgB,EAChB,YAAY,EACb,MAAM,mBAAmB,CAAC;AAE3B;;;;;;GAMG;AACH,MAAM,MAAM,uBAAuB,GAAG;IACpC,IAAI,EAAE,MAAM,CAAC;IACb;;OAEG;IACH,OAAO,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAClC;;OAEG;IACH,aAAa,CAAC,EAAE,qBAAqB,CAAC;CACvC,CAAC;AAEF;;;GAGG;AACH,MAAM,WAAW,2BAA2B;IAC1C,IAAI,EAAE,UAAU,CAAC;IACjB,OAAO,EAAE,OAAO,CAAC;IACjB,cAAc,EAAE;QACd,GAAG,CAAC,EAAE,MAAM,CAAC;QACb,IAAI,CAAC,EAAE,MAAM,CAAC;QACd,KAAK,CAAC,EAAE,MAAM,CAAC;QACf,GAAG,CAAC,EAAE,MAAM,CAAC;QACb,IAAI,CAAC,EAAE,MAAM,CAAC;QACd,MAAM,CAAC,EAAE,MAAM,CAAC;QAChB,MAAM,CAAC,EAAE,MAAM,CAAC;QAChB,OAAO,CAAC,EAAE,MAAM,CAAC;QACjB,cAAc,CAAC,EAAE,MAAM,CAAC;QACxB,OAAO,CAAC,EAAE,MAAM,CAAC;QACjB,WAAW,CAAC,EAAE,MAAM,CAAC;QACrB,UAAU,CAAC,EAAE,MAAM,CAAC;QACpB,iBAAiB,CAAC,EAAE,MAAM,CAAC;QAC3B,UAAU,CAAC,EAAE,MAAM,CAAC;QACpB,WAAW,EAAE,OAAO,CAAC;QACrB,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,QAAQ,CAAC,EAAE,MAAM,CAAC;KACnB,CAAC;CACH;AAED;;;GAGG;AACH,MAAM,WAAW,MAAM;IACrB,IAAI,EAAE,MAAM,CAAC;IACb;;OAEG;IACH,UAAU,EAAE,MAAM,CAAC;IACnB;;OAEG;IACH,aAAa,EAAE,OAAO,CAAC;IACvB;;OAEG;IACH,YAAY,EAAE,OAAO,CAAC;CACvB;AAED;;;GAGG;AACH,MAAM,WAAW,cAAe,SAAQ,MAAM;IAC5C,IAAI,EAAE,UAAU,CAAC;IACjB;;OAEG;IACH,MAAM,EAAE,MAAM,CAAC;IACf;;OAEG;IACH,MAAM,EAAE;QACN,QAAQ,EAAE,MAAM,CAAC;QACjB,SAAS,EAAE,MAAM,CAAC;KACnB,CAAC;CACH;AAED;;;GAGG;AACH,MAAM,WAAW,YAAa,SAAQ,MAAM;IAC1C,IAAI,EAAE,QAAQ,CAAC;IACf;;OAEG;IACH,yBAAyB,EAAE,OAAO,CAAC;IACnC;;OAEG;IACH,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;IACrB;;OAEG;IACH,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;IACrB;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,CAAC;IACd;;OAEG;IACH,wBAAwB,CAAC,EAAE;QACzB,IAAI,EAAE,MAAM,CAAC;QACb,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;QACrB,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;KACtB,CAAC;CACH;AAED;;;GAGG;AACH,MAAM,WAAW,2BAA2B;IAC1C,IAAI,EAAE,UAAU,CAAC;IACjB,OAAO,EAAE,OAAO,CAAC;IACjB,MAAM,EAAE,cAAc,GAAG,YAAY,CAAC;CACvC;AAED;;GAEG;AACH,MAAM,WAAW,+BAA+B;IAC9C,IAAI,EAAE,cAAc,CAAC;IACrB,OAAO,EAAE,OAAO,CAAC;IACjB,OAAO,EAAE,MAAM,CAAC;CACjB;AAED;;;;GAIG;AACH,MAAM,WAAW,wBAAwB;IACvC,IAAI,EAAE,OAAO,CAAC;IACd,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;CAChB;AAED;;;;GAIG;AACH,MAAM,WAAW,yBAAyB;IACxC,IAAI,EAAE,QAAQ,CAAC;IACf,OAAO,EAAE,MAAM,CAAC;IAChB,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;CAChB;AAED;;;;GAIG;AACH,MAAM,WAAW,yBAAyB;IACxC,IAAI,EAAE,QAAQ,CAAC;IACf,GAAG,EAAE,MAAM,CAAC;IACZ,KAAK,EAAE,MAAM,CAAC;IACd,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;CAChB;AAGD;;GAEG;AACH,MAAM,WAAW,qBAAqB;IACpC,WAAW,EAAE,MAAM,GAAG,IAAI,CAAC;IAC3B,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC7B,IAAI,EAAE,MAAM,GAAG,IAAI,CAAC;IACpB,SAAS,EAAE,MAAM,GAAG,IAAI,CAAC;IACzB,WAAW,EAAE,MAAM,GAAG,IAAI,CAAC;IAC3B,gBAAgB,EAAE,MAAM,CAAC;IACzB,QAAQ,EAAE,MAAM,CAAC;IACjB,QAAQ,EAAE,MAAM,CAAC;IACjB,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC;IAClB,GAAG,EAAE,MAAM,CAAC;IACZ,YAAY,EAAE,IAAI,GAAG,iCAAiC,CAAC;CACxD;AAGD,MAAM,WAAW,iCAAiC;IAChD,IAAI,EAAE,MAAM,GAAG,IAAI,CAAC;IACpB,oBAAoB,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;IACtC,mBAAmB,EAAE,MAAM,GAAG,IAAI,CAAC;IACnC,SAAS,EAAE,MAAM,GAAG,IAAI,CAAC;IACzB,WAAW,EAAE,MAAM,GAAG,IAAI,CAAC;IAC3B,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;IACrB,wBAAwB,EAAE,OAAO,CAAC;IAClC,gBAAgB,EAAE,OAAO,CAAC;IAC1B,0BAA0B,EAAE,OAAO,CAAC;IACpC,SAAS,EAAE,MAAM,GAAG,IAAI,CAAC;IACzB,IAAI,EAAE,MAAM,GAAG,IAAI,CAAC;IACpB,QAAQ,EAAE,MAAM,GAAG,IAAI,CAAC;IACxB,aAAa,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;IAC/B,IAAI,EAAE,MAAM,GAAG,IAAI,CAAC;IACpB,SAAS,EAAE,OAAO,CAAC;IACnB,iBAAiB,EAAE,MAAM,GAAG,IAAI,CAAC;IACjC,oBAAoB,EAAE,MAAM,GAAG,IAAI,CAAC;IACpC,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;IACrB,MAAM,EAAE,OAAO,CAAC;IAChB,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC;IACnB,MAAM,EAAE,MAAM,GAAG,IAAI,CAAC;IACtB,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;IACrB,qBAAqB,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;IACvC,oBAAoB,EAAE,MAAM,GAAG,IAAI,CAAC;IACpC,cAAc,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;IAChC,UAAU,EAAE,MAAM,GAAG,IAAI,CAAC;CAC3B;AAED;;GAEG;AACH,MAAM,WAAW,0BAA0B;IACzC,IAAI,EAAE,SAAS,CAAC;CACjB;AAED;;GAEG;AACH,MAAM,MAAM,mBAAmB,GAC3B,uBAAuB,GACvB,2BAA2B,GAC3B,2BAA2B,GAC3B,+BAA+B,GAC/B,wBAAwB,GACxB,yBAAyB,GACzB,yBAAyB,GACzB,0BAA0B,CAAC;AAE/B;;GAEG;AACH,MAAM,MAAM,wBAAwB,GAAG;IACrC,SAAS,EAAE,MAAM,CAAC;CACnB,CAAC;AAGF,MAAM,MAAM,yBAAyB,GAAG;IACtC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,cAAc,CAAC,EAAE,MAAM,CAAC;IACxB,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,MAAM,CAAC,EAAE,MAAM,CAAC;CACjB,CAAC;AAEF;;GAEG;AACH,oBAAY,oBAAoB;IAC9B,QAAQ,aAAa;IACrB,KAAK,UAAU;IACf,MAAM,WAAW;IACjB,MAAM,WAAW;IACjB,IAAI,SAAS;IACb,aAAa,iBAAiB;CAC/B;AACD;;;;GAIG;AACH,MAAM,MAAM,oBAAoB,GAAG,yBAAyB,GAAG;IAC7D,IAAI,EAAE,oBAAoB,CAAC,QAAQ,CAAC;IACpC,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,OAAO,CAAC,EAAE,OAAO,CAAC;CACnB,CAAC;AAEF;;;GAGG;AACH,MAAM,WAAW,wBAAwB;IACvC,IAAI,EAAE,oBAAoB,CAAC,aAAa,CAAC;IACzC,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,OAAO,CAAC,EAAE,OAAO,CAAC;IAClB,OAAO,EAAE,MAAM,CAAC;CACjB;AAED;;GAEG;AACH,MAAM,WAAW,iBAAiB;IAChC,IAAI,EAAE,oBAAoB,CAAC,KAAK,CAAC;IACjC,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;CAChB;AAED;;;GAGG;AACH,MAAM,WAAW,kBAAkB;IACjC,IAAI,EAAE,oBAAoB,CAAC,MAAM,CAAC;IAClC,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,OAAO,EAAE,MAAM,CAAC;IAChB,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;CAChB;AAED;;;GAGG;AACH,MAAM,WAAW,kBAAkB;IACjC,IAAI,EAAE,oBAAoB,CAAC,MAAM,CAAC;IAClC,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,GAAG,EAAE,MAAM,CAAC;IACZ,KAAK,EAAE,MAAM,CAAC;IACd,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;CAChB;AAED;;;GAGG;AACH,MAAM,MAAM,gBAAgB,GACxB,IAAI,GACJ,MAAM,GACN;IAAE,IAAI,EAAE,oBAAoB,CAAC,IAAI,CAAC;IAAC,SAAS,CAAC,EAAE,MAAM,CAAC;IAAC,IAAI,EAAE,IAAI,GAAG,MAAM,CAAA;CAAE,CAAC;AAEjF;;;GAGG;AACH,MAAM,MAAM,mCAAmC,GAC3C,gBAAgB,GAChB,wBAAwB,GACxB,iBAAiB,GACjB,kBAAkB,GAClB,kBAAkB,GAClB,oBAAoB,CAAC;AAEzB;;;GAGG;AACH,MAAM,MAAM,wBAAwB,GAChC,IAAI,GACJ,wBAAwB,GACxB,mCAAmC,CAAC;AAExC;;GAEG;AACH,oBAAY,2BAA2B;IACrC,GAAG,QAAQ;IACX,GAAG,QAAQ;IACX,OAAO,YAAY;IACnB,IAAI,SAAS;IACb,GAAG,QAAQ;CACZ;AAED;;GAEG;AACH,MAAM,MAAM,mBAAmB,GAAG;IAChC;;OAEG;IACH,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;IACrB;;;;OAIG;IACH,QAAQ,EAAE,MAAM,GAAG,IAAI,CAAC;IACxB;;OAEG;IACH,IAAI,EAAE,MAAM,GAAG,IAAI,CAAC;IACpB;;OAEG;IACH,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAE1B,KAAK,EAAE,SAAS,GAAG,iBAAiB,GAAG,QAAQ,GAAG,IAAI,CAAC;CACxD,GAAG,CAAC,sBAAsB,GAAG,0BAA0B,CAAC,CAAC;AAE1D;;GAEG;AACH,MAAM,MAAM,sBAAsB,GAAG;IACnC;;OAEG;IACH,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC;IAC/B;;OAEG;IACH,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;IACrB;;OAEG;IACH,WAAW,EAAE,gCAAgC,EAAE,CAAC;IAChD;;OAEG;IACH,eAAe,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;IAChC;;OAEG;IACH,oBAAoB,CAAC,EAAE,MAAM,CAAC;IAC9B;;OAEG;IACH,kBAAkB,EAAE,MAAM,GAAG,IAAI,CAAC;IAClC;;OAEG;IACH,gBAAgB,EAAE,MAAM,GAAG,IAAI,CAAC;IAChC;;OAEG;IACH,uBAAuB,CAAC,EAAE,MAAM,CAAC;IAUjC,iBAAiB,CAAC,EAAE,SAAS,GAAG,QAAQ,GAAG,eAAe,GAAG,UAAU,CAAC;CACzE,CAAC;AAGF;;GAEG;AACH,MAAM,MAAM,gCAAgC,GAAG;IAC7C,UAAU,EAAE,MAAM,GAAG,IAAI,CAAC;IAC1B,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC;IACnB,IAAI,EAAE,MAAM,GAAG,IAAI,CAAC;IACpB,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,aAAa,CAAC,EAAE,OAAO,CAAC;IACxB,iBAAiB,CAAC,EAAE;QAAE,CAAC,EAAE,MAAM,CAAC;QAAC,CAAC,EAAE,MAAM,CAAC;QAAC,KAAK,EAAE,MAAM,CAAC;QAAC,MAAM,EAAE,MAAM,CAAA;KAAE,CAAC;IAC5E,aAAa,CAAC,EAAE,MAAM,CAAC;CACxB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,0BAA0B,GAAG;IACvC;;OAEG;IACH,KAAK,CAAC,EAAE,MAAM,CAAC;IACf;;OAEG;IACH,KAAK,CAAC,EAAE,MAAM,CAAC;IACf;;;;OAIG;IACH,QAAQ,CAAC,EAAE,2BAA2B,CAAC;IACvC;;OAEG;IACH,gBAAgB,CAAC,EAAE,MAAM,EAAE,CAAC;CAC7B,CAAC;AAEF;;;GAGG;AACH,MAAM,WAAW,mBAAmB;IAClC,UAAU,EAAE,MAAM,CAAC;IACnB,OAAO,EAAE,mBAAmB,CAAC;IAC7B,OAAO,EAAE,mBAAmB,CAAC;CAC9B;AAGD;;GAEG;AACH,MAAM,MAAM,wBAAwB,GAAG;IACrC;;OAEG;IACH,KAAK,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;IACtB;;;;OAIG;IACH,QAAQ,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;IACzB;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;IACrB;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAC3B;;OAEG;IACH,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,KAAK,CAAC,EAAE,OAAO,GAAG,MAAM,CAAC;IACzB;;OAEG;IACH,eAAe,CAAC,EAAE,MAAM,CAAC;IACzB;;;OAGG;IACH,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC;IACnB;;;;;OAKG;IACH,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB;;;OAGG;IACH,KAAK,CAAC,EAAE,MAAM,CAAC;IACf;;;;;;;;OAQG;IACH,WAAW,CAAC,EAAE,OAAO,CAAC;IACtB;;;OAGG;IACH,kBAAkB,CAAC,EAAE,MAAM,CAAC;IAC5B;;;;;;;;;OASG;IACH,MAAM,CAAC,EAAE,OAAO,CAAC;IACjB;;;OAGG;IACH,WAAW,CAAC,EAAE,gCAAgC,EAAE,CAAC;IAUjD,iBAAiB,CAAC,EAAE,SAAS,GAAG,QAAQ,GAAG,eAAe,GAAG,UAAU,CAAC;CACzE,CAAC;AAEF;;GAEG;AACH,MAAM,WAAW,wBAAwB;IACvC,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,OAAO,EAAE,wBAAwB,CAAC;IAClC,OAAO,EAAE,wBAAwB,CAAC;CACnC;AAED;;GAEG;AACH,MAAM,WAAW,YAAY;IAC3B,IAAI,EAAE,MAAM,CAAC;IACb,OAAO,EAAE,mBAAmB,CAAC;CAC9B;AAED;;;GAGG;AACH,MAAM,WAAW,oBAAoB;IACnC,YAAY,EAAE,YAAY,CAAC;IAC3B,gBAAgB,EAAE,MAAM,CAAC;IACzB,QAAQ,CAAC,EAAE,MAAM,CAAC;CACnB;AAED;;;;GAIG;AACH,MAAM,WAAW,oBAAoB;IACnC,eAAe,EAAE,OAAO,CAAC;IACzB,eAAe,EAAE,OAAO,CAAC;IACzB,cAAc,EAAE,OAAO,CAAC;IACxB,QAAQ,CAAC,EAAE,2BAA2B,CAAC;CACxC;AAED,MAAM,WAAW,kBAAkB;IACjC;;;OAGG;IACH,UAAU,EAAE,MAAM,CAAC;IACnB;;OAEG;IACH,WAAW,EAAE,MAAM,CAAC;IACpB;;OAEG;IACH,SAAS,CAAC,EAAE;QACV;;;WAGG;QACH,iBAAiB,EAAE,MAAM,CAAC;QAC1B;;WAEG;QACH,WAAW,EAAE,MAAM,CAAC;KACrB,CAAC;IACF;;OAEG;IACH,OAAO,CAAC,EAAE;QACR;;;;WAIG;QACH,aAAa,CAAC,EAAE,OAAO,CAAC;QACxB;;;WAGG;QACH,wBAAwB,CAAC,EAAE,OAAO,CAAC;QACnC;;;;;WAKG;QACH,oBAAoB,CAAC,EAAE,OAAO,CAAC;KAChC,CAAC;CACH;AAGD,MAAM,WAAW,oBAAoB;IACnC,UAAU,EAAE,MAAM,CAAC;IACnB,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAC9B,OAAO,CAAC,EAAE,2BAA2B,CAAC;CACvC;AAED;;GAEG;AACH,MAAM,MAAM,2BAA2B,GAAG;IACxC;;;OAGG;IACH,kBAAkB,CAAC,EAAE,MAAM,CAAC;IAC5B;;;;OAIG;IACH,iBAAiB,CAAC,EAAE,MAAM,EAAE,CAAC;IAC7B;;OAEG;IACH,qBAAqB,CAAC,EAAE,MAAM,CAAC;IAC/B;;;;OAIG;IACH,mBAAmB,CAAC,EAAE,OAAO,CAAC;IAC9B;;;OAGG;IACH,cAAc,CAAC,EAAE,OAAO,CAAC;IACzB;;;OAGG;IACH,SAAS,CAAC,EAAE,OAAO,CAAC;IACpB;;;OAGG;IACH,YAAY,CAAC,EAAE,OAAO,CAAC;IACvB;;;OAGG;IACH,iBAAiB,CAAC,EAAE,OAAO,CAAC;CAC7B,CAAC;AAEF,YAAY,EAAE,YAAY,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-notifications/build/Notifications.types.js b/node_modules/expo-notifications/build/Notifications.types.js
index 1d3dea5..98a44b2 100644
--- a/node_modules/expo-notifications/build/Notifications.types.js
+++ b/node_modules/expo-notifications/build/Notifications.types.js
@@ -1,3 +1,15 @@
+/**
+ * Calendar trigger inputs must have the "type" property set to one of these values
+ */
+export var CalendarTriggerTypes;
+(function (CalendarTriggerTypes) {
+    CalendarTriggerTypes["CALENDAR"] = "calendar";
+    CalendarTriggerTypes["DAILY"] = "daily";
+    CalendarTriggerTypes["WEEKLY"] = "weekly";
+    CalendarTriggerTypes["YEARLY"] = "yearly";
+    CalendarTriggerTypes["DATE"] = "date";
+    CalendarTriggerTypes["TIME_INTERVAL"] = "timeInterval";
+})(CalendarTriggerTypes || (CalendarTriggerTypes = {}));
 /**
  * An enum corresponding to values appropriate for Android's [`Notification#priority`](https://developer.android.com/reference/android/app/Notification#priority) field.
  */
diff --git a/node_modules/expo-notifications/build/Notifications.types.js.map b/node_modules/expo-notifications/build/Notifications.types.js.map
index 0ce7f00..6a83840 100644
--- a/node_modules/expo-notifications/build/Notifications.types.js.map
+++ b/node_modules/expo-notifications/build/Notifications.types.js.map
@@ -1 +1 @@
-{"version":3,"file":"Notifications.types.js","sourceRoot":"","sources":["../src/Notifications.types.ts"],"names":[],"mappings":"AAgWA;;GAEG;AACH,MAAM,CAAN,IAAY,2BAMX;AAND,WAAY,2BAA2B;IACrC,0CAAW,CAAA;IACX,0CAAW,CAAA;IACX,kDAAmB,CAAA;IACnB,4CAAa,CAAA;IACb,0CAAW,CAAA;AACb,CAAC,EANW,2BAA2B,KAA3B,2BAA2B,QAMtC","sourcesContent":["import type {\n  PermissionExpiration,\n  PermissionResponse,\n  PermissionStatus,\n  Subscription,\n} from 'expo-modules-core';\n\n/**\n * An object represents a notification delivered by a push notification system.\n *\n * On Android under `remoteMessage` field a JS version of the Firebase `RemoteMessage` may be accessed.\n * On iOS under `payload` you may find full contents of [`UNNotificationContent`'s](https://developer.apple.com/documentation/usernotifications/unnotificationcontent?language=objc) [`userInfo`](https://developer.apple.com/documentation/usernotifications/unnotificationcontent/1649869-userinfo?language=objc), for example [remote notification payload](https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html)\n * On web there is no extra data.\n */\nexport type PushNotificationTrigger = {\n  type: 'push';\n  /**\n   * @platform ios\n   */\n  payload?: Record<string, unknown>;\n  /**\n   * @platform android\n   */\n  remoteMessage?: FirebaseRemoteMessage;\n};\n\n/**\n * A trigger related to a [`UNCalendarNotificationTrigger`](https://developer.apple.com/documentation/usernotifications/uncalendarnotificationtrigger?language=objc).\n * @platform ios\n */\nexport interface CalendarNotificationTrigger {\n  type: 'calendar';\n  repeats: boolean;\n  dateComponents: {\n    era?: number;\n    year?: number;\n    month?: number;\n    day?: number;\n    hour?: number;\n    minute?: number;\n    second?: number;\n    weekday?: number;\n    weekdayOrdinal?: number;\n    quarter?: number;\n    weekOfMonth?: number;\n    weekOfYear?: number;\n    yearForWeekOfYear?: number;\n    nanosecond?: number;\n    isLeapMonth: boolean;\n    timeZone?: string;\n    calendar?: string;\n  };\n}\n\n/**\n * The region used to determine when the system sends the notification.\n * @platform ios\n */\nexport interface Region {\n  type: string;\n  /**\n   * The identifier for the region object.\n   */\n  identifier: string;\n  /**\n   * A Boolean indicating that notifications are generated upon entry into the region.\n   */\n  notifyOnEntry: boolean;\n  /**\n   * A Boolean indicating that notifications are generated upon exit from the region.\n   */\n  notifyOnExit: boolean;\n}\n\n/**\n * A circular geographic region, specified as a center point and radius. Based on Core Location [`CLCircularRegion`](https://developer.apple.com/documentation/corelocation/clcircularregion) class.\n * @platform ios\n */\nexport interface CircularRegion extends Region {\n  type: 'circular';\n  /**\n   * The radius (measured in meters) that defines the geographic area’s outer boundary.\n   */\n  radius: number;\n  /**\n   * The center point of the geographic area.\n   */\n  center: {\n    latitude: number;\n    longitude: number;\n  };\n}\n\n/**\n * A region used to detect the presence of iBeacon devices. Based on Core Location [`CLBeaconRegion`](https://developer.apple.com/documentation/corelocation/clbeaconregion) class.\n * @platform ios\n */\nexport interface BeaconRegion extends Region {\n  type: 'beacon';\n  /**\n   * A Boolean value that indicates whether Core Location sends beacon notifications when the device’s display is on.\n   */\n  notifyEntryStateOnDisplay: boolean;\n  /**\n   * The major value from the beacon identity constraint that defines the beacon region.\n   */\n  major: number | null;\n  /**\n   * The minor value from the beacon identity constraint that defines the beacon region.\n   */\n  minor: number | null;\n  /**\n   * The UUID value from the beacon identity constraint that defines the beacon region.\n   */\n  uuid?: string;\n  /**\n   * The beacon identity constraint that defines the beacon region.\n   */\n  beaconIdentityConstraint?: {\n    uuid: string;\n    major: number | null;\n    minor: number | null;\n  };\n}\n\n/**\n * A trigger related to a [`UNLocationNotificationTrigger`](https://developer.apple.com/documentation/usernotifications/unlocationnotificationtrigger?language=objc).\n * @platform ios\n */\nexport interface LocationNotificationTrigger {\n  type: 'location';\n  repeats: boolean;\n  region: CircularRegion | BeaconRegion;\n}\n\n/**\n * A trigger related to an elapsed time interval. May be repeating (see `repeats` field).\n */\nexport interface TimeIntervalNotificationTrigger {\n  type: 'timeInterval';\n  repeats: boolean;\n  seconds: number;\n}\n\n/**\n * A trigger related to a daily notification.\n * > The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.\n * @platform android\n */\nexport interface DailyNotificationTrigger {\n  type: 'daily';\n  hour: number;\n  minute: number;\n}\n\n/**\n * A trigger related to a weekly notification.\n * > The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.\n * @platform android\n */\nexport interface WeeklyNotificationTrigger {\n  type: 'weekly';\n  weekday: number;\n  hour: number;\n  minute: number;\n}\n\n/**\n * A trigger related to a yearly notification.\n * > The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.\n * @platform android\n */\nexport interface YearlyNotificationTrigger {\n  type: 'yearly';\n  day: number;\n  month: number;\n  hour: number;\n  minute: number;\n}\n\n// @docsMissing\n/**\n * A Firebase `RemoteMessage` that caused the notification to be delivered to the app.\n */\nexport interface FirebaseRemoteMessage {\n  collapseKey: string | null;\n  data: Record<string, string>;\n  from: string | null;\n  messageId: string | null;\n  messageType: string | null;\n  originalPriority: number;\n  priority: number;\n  sentTime: number;\n  to: string | null;\n  ttl: number;\n  notification: null | FirebaseRemoteMessageNotification;\n}\n\n// @docsMissing\nexport interface FirebaseRemoteMessageNotification {\n  body: string | null;\n  bodyLocalizationArgs: string[] | null;\n  bodyLocalizationKey: string | null;\n  channelId: string | null;\n  clickAction: string | null;\n  color: string | null;\n  usesDefaultLightSettings: boolean;\n  usesDefaultSound: boolean;\n  usesDefaultVibrateSettings: boolean;\n  eventTime: number | null;\n  icon: string | null;\n  imageUrl: string | null;\n  lightSettings: number[] | null;\n  link: string | null;\n  localOnly: boolean;\n  notificationCount: number | null;\n  notificationPriority: number | null;\n  sound: string | null;\n  sticky: boolean;\n  tag: string | null;\n  ticker: string | null;\n  title: string | null;\n  titleLocalizationArgs: string[] | null;\n  titleLocalizationKey: string | null;\n  vibrateTimings: number[] | null;\n  visibility: number | null;\n}\n\n/**\n * Represents a notification trigger that is unknown to `expo-notifications` and that it didn't know how to serialize for JS.\n */\nexport interface UnknownNotificationTrigger {\n  type: 'unknown';\n}\n\n/**\n * A union type containing different triggers which may cause the notification to be delivered to the application.\n */\nexport type NotificationTrigger =\n  | PushNotificationTrigger\n  | CalendarNotificationTrigger\n  | LocationNotificationTrigger\n  | TimeIntervalNotificationTrigger\n  | DailyNotificationTrigger\n  | WeeklyNotificationTrigger\n  | YearlyNotificationTrigger\n  | UnknownNotificationTrigger;\n\n/**\n * A trigger that will cause the notification to be delivered immediately.\n */\nexport type ChannelAwareTriggerInput = {\n  channelId: string;\n};\n\n// @docsMissing\nexport type CalendarTriggerInputValue = {\n  timezone?: string;\n  year?: number;\n  month?: number;\n  weekday?: number;\n  weekOfMonth?: number;\n  weekOfYear?: number;\n  weekdayOrdinal?: number;\n  day?: number;\n  hour?: number;\n  minute?: number;\n  second?: number;\n};\n\n/**\n * A trigger that will cause the notification to be delivered once or many times when the date components match the specified values.\n * Corresponds to native [`UNCalendarNotificationTrigger`](https://developer.apple.com/documentation/usernotifications/uncalendarnotificationtrigger?language=objc).\n * @platform ios\n */\nexport type CalendarTriggerInput = CalendarTriggerInputValue & {\n  channelId?: string;\n  repeats?: boolean;\n};\n\n/**\n * A trigger that will cause the notification to be delivered once or many times (depends on the `repeats` field) after `seconds` time elapse.\n * > **On iOS**, when `repeats` is `true`, the time interval must be 60 seconds or greater. Otherwise, the notification won't be triggered.\n */\nexport interface TimeIntervalTriggerInput {\n  channelId?: string;\n  repeats?: boolean;\n  seconds: number;\n}\n\n/**\n * A trigger that will cause the notification to be delivered once per day.\n */\nexport interface DailyTriggerInput {\n  channelId?: string;\n  hour: number;\n  minute: number;\n  repeats: true;\n}\n\n/**\n * A trigger that will cause the notification to be delivered once every week.\n * > **Note:** Weekdays are specified with a number from `1` through `7`, with `1` indicating Sunday.\n */\nexport interface WeeklyTriggerInput {\n  channelId?: string;\n  weekday: number;\n  hour: number;\n  minute: number;\n  repeats: true;\n}\n\n/**\n * A trigger that will cause the notification to be delivered once every year.\n * > **Note:** all properties are specified in JavaScript Date's ranges.\n */\nexport interface YearlyTriggerInput {\n  channelId?: string;\n  day: number;\n  month: number;\n  hour: number;\n  minute: number;\n  repeats: true;\n}\n\n/**\n * A trigger that will cause the notification to be delivered once at the specified `Date`.\n * If you pass in a `number` it will be interpreted as a Unix timestamp.\n */\nexport type DateTriggerInput = Date | number | { channelId?: string; date: Date | number };\n\n/**\n * A type represents time-based, schedulable triggers. For these triggers you can check the next trigger date\n * with [`getNextTriggerDateAsync`](#notificationsgetnexttriggerdateasynctrigger).\n */\nexport type SchedulableNotificationTriggerInput =\n  | DateTriggerInput\n  | TimeIntervalTriggerInput\n  | DailyTriggerInput\n  | WeeklyTriggerInput\n  | YearlyTriggerInput\n  | CalendarTriggerInput;\n\n/**\n * A type represents possible triggers with which you can schedule notifications.\n * A `null` trigger means that the notification should be scheduled for delivery immediately.\n */\nexport type NotificationTriggerInput =\n  | null\n  | ChannelAwareTriggerInput\n  | SchedulableNotificationTriggerInput;\n\n/**\n * An enum corresponding to values appropriate for Android's [`Notification#priority`](https://developer.android.com/reference/android/app/Notification#priority) field.\n */\nexport enum AndroidNotificationPriority {\n  MIN = 'min',\n  LOW = 'low',\n  DEFAULT = 'default',\n  HIGH = 'high',\n  MAX = 'max',\n}\n\n/**\n * An object represents notification's content.\n */\nexport type NotificationContent = {\n  /**\n   * Notification title - the bold text displayed above the rest of the content.\n   */\n  title: string | null;\n  /**\n   * On Android: `subText` - the display depends on the device.\n   *\n   * On iOS: `subtitle` - the bold text displayed between title and the rest of the content.\n   */\n  subtitle: string | null;\n  /**\n   * Notification body - the main content of the notification.\n   */\n  body: string | null;\n  /**\n   * Data associated with the notification, not displayed\n   */\n  data: Record<string, any>;\n  // @docsMissing\n  sound: 'default' | 'defaultCritical' | 'custom' | null;\n} & (NotificationContentIos | NotificationContentAndroid);\n\n/**\n * See [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationcontent?language=objc) for more information on specific fields.\n */\nexport type NotificationContentIos = {\n  /**\n   * The name of the image or storyboard to use when your app launches because of the notification.\n   */\n  launchImageName: string | null;\n  /**\n   * The number that your app’s icon displays.\n   */\n  badge: number | null;\n  /**\n   * The visual and audio attachments to display alongside the notification’s main content.\n   */\n  attachments: NotificationContentAttachmentIos[];\n  /**\n   * The text the system adds to the notification summary to provide additional context.\n   */\n  summaryArgument?: string | null;\n  /**\n   * The number the system adds to the notification summary when the notification represents multiple items.\n   */\n  summaryArgumentCount?: number;\n  /**\n   * The identifier of the notification’s category.\n   */\n  categoryIdentifier: string | null;\n  /**\n   * The identifier that groups related notifications.\n   */\n  threadIdentifier: string | null;\n  /**\n   * The value your app uses to determine which scene to display to handle the notification.\n   */\n  targetContentIdentifier?: string;\n  /*\n   * The notification’s importance and required delivery timing.\n   * Posible values:\n   * - 'passive' - the system adds the notification to the notification list without lighting up the screen or playing a sound\n   * - 'active' - the system presents the notification immediately, lights up the screen, and can play a sound\n   * - 'timeSensitive' - The system presents the notification immediately, lights up the screen, can play a sound, and breaks through system notification controls\n   * - 'critical - the system presents the notification immediately, lights up the screen, and bypasses the mute switch to play a sound\n   * @platform ios 15+\n   */\n  interruptionLevel?: 'passive' | 'active' | 'timeSensitive' | 'critical';\n};\n\n// @docsMissing\n/**\n * @platform ios\n */\nexport type NotificationContentAttachmentIos = {\n  identifier: string | null;\n  url: string | null;\n  type: string | null;\n  typeHint?: string;\n  hideThumbnail?: boolean;\n  thumbnailClipArea?: { x: number; y: number; width: number; height: number };\n  thumbnailTime?: number;\n};\n\n/**\n * See [Android developer documentation](https://developer.android.com/reference/android/app/Notification#fields) for more information on specific fields.\n */\nexport type NotificationContentAndroid = {\n  /**\n   * Application badge number associated with the notification.\n   */\n  badge?: number;\n  /**\n   * Accent color (in `#AARRGGBB` or `#RRGGBB` format) to be applied by the standard Style templates when presenting this notification.\n   */\n  color?: string;\n  /**\n   * Relative priority for this notification. Priority is an indication of how much of the user's valuable attention should be consumed by this notification.\n   * Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification.\n   * The system will make a determination about how to interpret this priority when presenting the notification.\n   */\n  priority?: AndroidNotificationPriority;\n  /**\n   * The pattern with which to vibrate.\n   */\n  vibrationPattern?: number[];\n};\n\n/**\n * An object represents a request to present a notification. It has content — how it's being represented, and a trigger — what triggers the notification.\n * Many notifications ([`Notification`](#notification)) may be triggered with the same request (for example, a repeating notification).\n */\nexport interface NotificationRequest {\n  identifier: string;\n  content: NotificationContent;\n  trigger: NotificationTrigger;\n}\n\n// TODO(simek): asses if we can base this type on `NotificationContent`, since most of the fields looks like repetition\n/**\n * An object represents notification content that you pass in to `presentNotificationAsync` or as a part of `NotificationRequestInput`.\n */\nexport type NotificationContentInput = {\n  /**\n   * Notification title - the bold text displayed above the rest of the content.\n   */\n  title?: string | null;\n  /**\n   * On Android: `subText` - the display depends on the device.\n   *\n   * On iOS: `subtitle` - the bold text displayed between title and the rest of the content.\n   */\n  subtitle?: string | null;\n  /**\n   * The main content of the notification.\n   */\n  body?: string | null;\n  /**\n   * Data associated with the notification, not displayed.\n   */\n  data?: Record<string, any>;\n  /**\n   * Application badge number associated with the notification.\n   */\n  badge?: number;\n  sound?: boolean | string;\n  /**\n   * The name of the image or storyboard to use when your app launches because of the notification.\n   */\n  launchImageName?: string;\n  /**\n   * The pattern with which to vibrate.\n   * @platform android\n   */\n  vibrate?: number[];\n  /**\n   * Relative priority for this notification. Priority is an indication of how much of the user's valuable attention should be consumed by this notification.\n   * Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification.\n   * The system will make a determination about how to interpret this priority when presenting the notification.\n   * @platform android\n   */\n  priority?: string;\n  /**\n   * Accent color (in `#AARRGGBB` or `#RRGGBB` format) to be applied by the standard Style templates when presenting this notification.\n   * @platform android\n   */\n  color?: string;\n  /**\n   * If set to `false`, the notification will not be automatically dismissed when clicked.\n   * The setting will be used when the value is not provided or is invalid is set to `true`, and the notification\n   * will be dismissed automatically anyway. Corresponds directly to Android's `setAutoCancel` behavior.\n   *\n   * See [Android developer documentation](https://developer.android.com/reference/android/app/Notification.Builder#setAutoCancel(boolean))\n   * for more details.\n   * @platform android\n   */\n  autoDismiss?: boolean;\n  /**\n   * The identifier of the notification’s category.\n   * @platform ios\n   */\n  categoryIdentifier?: string;\n  /**\n   * If set to `true`, the notification cannot be dismissed by swipe. This setting defaults\n   * to `false` if not provided or is invalid. Corresponds directly do Android's `isOngoing` behavior.\n   * In Firebase terms this property of a notification is called `sticky`.\n   *\n   * See [Android developer documentation](https://developer.android.com/reference/android/app/Notification.Builder#setOngoing(boolean))\n   * and [Firebase documentation](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#AndroidNotification.FIELDS.sticky)\n   * for more details.\n   * @platform android\n   */\n  sticky?: boolean;\n  /**\n   * The visual and audio attachments to display alongside the notification’s main content.\n   * @platform ios\n   */\n  attachments?: NotificationContentAttachmentIos[];\n  /*\n   * The notification’s importance and required delivery timing.\n   * Posible values:\n   * - 'passive' - the system adds the notification to the notification list without lighting up the screen or playing a sound\n   * - 'active' - the system presents the notification immediately, lights up the screen, and can play a sound\n   * - 'timeSensitive' - The system presents the notification immediately, lights up the screen, can play a sound, and breaks through system notification controls\n   * - 'critical - the system presents the notification immediately, lights up the screen, and bypasses the mute switch to play a sound\n   * @platform ios 15+\n   */\n  interruptionLevel?: 'passive' | 'active' | 'timeSensitive' | 'critical';\n};\n\n/**\n * An object represents a notification request you can pass into `scheduleNotificationAsync`.\n */\nexport interface NotificationRequestInput {\n  identifier?: string;\n  content: NotificationContentInput;\n  trigger: NotificationTriggerInput;\n}\n\n/**\n * An object represents a single notification that has been triggered by some request ([`NotificationRequest`](#notificationrequest)) at some point in time.\n */\nexport interface Notification {\n  date: number;\n  request: NotificationRequest;\n}\n\n/**\n * An object represents user's interaction with the notification.\n * > **Note:** If the user taps on a notification `actionIdentifier` will be equal to [`Notifications.DEFAULT_ACTION_IDENTIFIER`](#notificationsdefault_action_identifier).\n */\nexport interface NotificationResponse {\n  notification: Notification;\n  actionIdentifier: string;\n  userText?: string;\n}\n\n/**\n * An object represents behavior that should be applied to the incoming notification.\n * > On Android, setting `shouldPlaySound: false` will result in the drop-down notification alert **not** showing, no matter what the priority is.\n * > This setting will also override any channel-specific sounds you may have configured.\n */\nexport interface NotificationBehavior {\n  shouldShowAlert: boolean;\n  shouldPlaySound: boolean;\n  shouldSetBadge: boolean;\n  priority?: AndroidNotificationPriority;\n}\n\nexport interface NotificationAction {\n  /**\n   * A unique string that identifies this action. If a user takes this action (for example, selects this button in the system's Notification UI),\n   * your app will receive this `actionIdentifier` via the [`NotificationResponseReceivedListener`](#addnotificationresponsereceivedlistenerlistener).\n   */\n  identifier: string;\n  /**\n   * The title of the button triggering this action.\n   */\n  buttonTitle: string;\n  /**\n   * Object which, if provided, will result in a button that prompts the user for a text response.\n   */\n  textInput?: {\n    /**\n     * A string which will be used as the title for the button used for submitting the text response.\n     * @platform ios\n     */\n    submitButtonTitle: string;\n    /**\n     * A string that serves as a placeholder until the user begins typing. Defaults to no placeholder string.\n     */\n    placeholder: string;\n  };\n  /**\n   * Object representing the additional configuration options.\n   */\n  options?: {\n    /**\n     * Boolean indicating whether the button title will be highlighted a different color (usually red).\n     * This usually signifies a destructive action such as deleting data.\n     * @platform ios\n     */\n    isDestructive?: boolean;\n    /**\n     * Boolean indicating whether triggering the action will require authentication from the user.\n     * @platform ios\n     */\n    isAuthenticationRequired?: boolean;\n    /**\n     * Boolean indicating whether triggering this action foregrounds the app.\n     * If `false` and your app is killed (not just backgrounded), [`NotificationResponseReceived` listeners](#addnotificationresponsereceivedlistenerlistener)\n     * will not be triggered when a user selects this action.\n     * @default true\n     */\n    opensAppToForeground?: boolean;\n  };\n}\n\n// @docsMissing\nexport interface NotificationCategory {\n  identifier: string;\n  actions: NotificationAction[];\n  options?: NotificationCategoryOptions;\n}\n\n/**\n * @platform ios\n */\nexport type NotificationCategoryOptions = {\n  /**\n   * Customizable placeholder for the notification preview text. This is shown if the user has disabled notification previews for the app.\n   * Defaults to the localized iOS system default placeholder (`Notification`).\n   */\n  previewPlaceholder?: string;\n  /**\n   * Array of [Intent Class Identifiers](https://developer.apple.com/documentation/sirikit/intent_class_identifiers). When a notification is delivered,\n   * the presence of an intent identifier lets the system know that the notification is potentially related to the handling of a request made through Siri.\n   * @default []\n   */\n  intentIdentifiers?: string[];\n  /**\n   * A format string for the summary description used when the system groups the category’s notifications.\n   */\n  categorySummaryFormat?: string;\n  /**\n   * A boolean indicating whether to send actions for handling when the notification is dismissed (the user must explicitly dismiss\n   * the notification interface - ignoring a notification or flicking away a notification banner does not trigger this action).\n   * @default false\n   */\n  customDismissAction?: boolean;\n  /**\n   * A boolean indicating whether to allow CarPlay to display notifications of this type. **Apps must be approved for CarPlay to make use of this feature.**\n   * @default false\n   */\n  allowInCarPlay?: boolean;\n  /**\n   * A boolean indicating whether to show the notification's title, even if the user has disabled notification previews for the app.\n   * @default false\n   */\n  showTitle?: boolean;\n  /**\n   * A boolean indicating whether to show the notification's subtitle, even if the user has disabled notification previews for the app.\n   * @default false\n   */\n  showSubtitle?: boolean;\n  /**\n   * A boolean indicating whether to allow notifications to be automatically read by Siri when the user is using AirPods.\n   * @default false\n   */\n  allowAnnouncement?: boolean;\n};\n\nexport type { Subscription, PermissionResponse, PermissionStatus, PermissionExpiration };\n"]}
\ No newline at end of file
+{"version":3,"file":"Notifications.types.js","sourceRoot":"","sources":["../src/Notifications.types.ts"],"names":[],"mappings":"AA8QA;;GAEG;AACH,MAAM,CAAN,IAAY,oBAOX;AAPD,WAAY,oBAAoB;IAC9B,6CAAqB,CAAA;IACrB,uCAAe,CAAA;IACf,yCAAiB,CAAA;IACjB,yCAAiB,CAAA;IACjB,qCAAa,CAAA;IACb,sDAA8B,CAAA;AAChC,CAAC,EAPW,oBAAoB,KAApB,oBAAoB,QAO/B;AAwFD;;GAEG;AACH,MAAM,CAAN,IAAY,2BAMX;AAND,WAAY,2BAA2B;IACrC,0CAAW,CAAA;IACX,0CAAW,CAAA;IACX,kDAAmB,CAAA;IACnB,4CAAa,CAAA;IACb,0CAAW,CAAA;AACb,CAAC,EANW,2BAA2B,KAA3B,2BAA2B,QAMtC","sourcesContent":["import type {\n  PermissionExpiration,\n  PermissionResponse,\n  PermissionStatus,\n  Subscription,\n} from 'expo-modules-core';\n\n/**\n * An object represents a notification delivered by a push notification system.\n *\n * On Android under `remoteMessage` field a JS version of the Firebase `RemoteMessage` may be accessed.\n * On iOS under `payload` you may find full contents of [`UNNotificationContent`'s](https://developer.apple.com/documentation/usernotifications/unnotificationcontent?language=objc) [`userInfo`](https://developer.apple.com/documentation/usernotifications/unnotificationcontent/1649869-userinfo?language=objc), for example [remote notification payload](https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html)\n * On web there is no extra data.\n */\nexport type PushNotificationTrigger = {\n  type: 'push';\n  /**\n   * @platform ios\n   */\n  payload?: Record<string, unknown>;\n  /**\n   * @platform android\n   */\n  remoteMessage?: FirebaseRemoteMessage;\n};\n\n/**\n * A trigger related to a [`UNCalendarNotificationTrigger`](https://developer.apple.com/documentation/usernotifications/uncalendarnotificationtrigger?language=objc).\n * @platform ios\n */\nexport interface CalendarNotificationTrigger {\n  type: 'calendar';\n  repeats: boolean;\n  dateComponents: {\n    era?: number;\n    year?: number;\n    month?: number;\n    day?: number;\n    hour?: number;\n    minute?: number;\n    second?: number;\n    weekday?: number;\n    weekdayOrdinal?: number;\n    quarter?: number;\n    weekOfMonth?: number;\n    weekOfYear?: number;\n    yearForWeekOfYear?: number;\n    nanosecond?: number;\n    isLeapMonth: boolean;\n    timeZone?: string;\n    calendar?: string;\n  };\n}\n\n/**\n * The region used to determine when the system sends the notification.\n * @platform ios\n */\nexport interface Region {\n  type: string;\n  /**\n   * The identifier for the region object.\n   */\n  identifier: string;\n  /**\n   * A Boolean indicating that notifications are generated upon entry into the region.\n   */\n  notifyOnEntry: boolean;\n  /**\n   * A Boolean indicating that notifications are generated upon exit from the region.\n   */\n  notifyOnExit: boolean;\n}\n\n/**\n * A circular geographic region, specified as a center point and radius. Based on Core Location [`CLCircularRegion`](https://developer.apple.com/documentation/corelocation/clcircularregion) class.\n * @platform ios\n */\nexport interface CircularRegion extends Region {\n  type: 'circular';\n  /**\n   * The radius (measured in meters) that defines the geographic area’s outer boundary.\n   */\n  radius: number;\n  /**\n   * The center point of the geographic area.\n   */\n  center: {\n    latitude: number;\n    longitude: number;\n  };\n}\n\n/**\n * A region used to detect the presence of iBeacon devices. Based on Core Location [`CLBeaconRegion`](https://developer.apple.com/documentation/corelocation/clbeaconregion) class.\n * @platform ios\n */\nexport interface BeaconRegion extends Region {\n  type: 'beacon';\n  /**\n   * A Boolean value that indicates whether Core Location sends beacon notifications when the device’s display is on.\n   */\n  notifyEntryStateOnDisplay: boolean;\n  /**\n   * The major value from the beacon identity constraint that defines the beacon region.\n   */\n  major: number | null;\n  /**\n   * The minor value from the beacon identity constraint that defines the beacon region.\n   */\n  minor: number | null;\n  /**\n   * The UUID value from the beacon identity constraint that defines the beacon region.\n   */\n  uuid?: string;\n  /**\n   * The beacon identity constraint that defines the beacon region.\n   */\n  beaconIdentityConstraint?: {\n    uuid: string;\n    major: number | null;\n    minor: number | null;\n  };\n}\n\n/**\n * A trigger related to a [`UNLocationNotificationTrigger`](https://developer.apple.com/documentation/usernotifications/unlocationnotificationtrigger?language=objc).\n * @platform ios\n */\nexport interface LocationNotificationTrigger {\n  type: 'location';\n  repeats: boolean;\n  region: CircularRegion | BeaconRegion;\n}\n\n/**\n * A trigger related to an elapsed time interval. May be repeating (see `repeats` field).\n */\nexport interface TimeIntervalNotificationTrigger {\n  type: 'timeInterval';\n  repeats: boolean;\n  seconds: number;\n}\n\n/**\n * A trigger related to a daily notification.\n * > The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.\n * @platform android\n */\nexport interface DailyNotificationTrigger {\n  type: 'daily';\n  hour: number;\n  minute: number;\n}\n\n/**\n * A trigger related to a weekly notification.\n * > The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.\n * @platform android\n */\nexport interface WeeklyNotificationTrigger {\n  type: 'weekly';\n  weekday: number;\n  hour: number;\n  minute: number;\n}\n\n/**\n * A trigger related to a yearly notification.\n * > The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.\n * @platform android\n */\nexport interface YearlyNotificationTrigger {\n  type: 'yearly';\n  day: number;\n  month: number;\n  hour: number;\n  minute: number;\n}\n\n// @docsMissing\n/**\n * A Firebase `RemoteMessage` that caused the notification to be delivered to the app.\n */\nexport interface FirebaseRemoteMessage {\n  collapseKey: string | null;\n  data: Record<string, string>;\n  from: string | null;\n  messageId: string | null;\n  messageType: string | null;\n  originalPriority: number;\n  priority: number;\n  sentTime: number;\n  to: string | null;\n  ttl: number;\n  notification: null | FirebaseRemoteMessageNotification;\n}\n\n// @docsMissing\nexport interface FirebaseRemoteMessageNotification {\n  body: string | null;\n  bodyLocalizationArgs: string[] | null;\n  bodyLocalizationKey: string | null;\n  channelId: string | null;\n  clickAction: string | null;\n  color: string | null;\n  usesDefaultLightSettings: boolean;\n  usesDefaultSound: boolean;\n  usesDefaultVibrateSettings: boolean;\n  eventTime: number | null;\n  icon: string | null;\n  imageUrl: string | null;\n  lightSettings: number[] | null;\n  link: string | null;\n  localOnly: boolean;\n  notificationCount: number | null;\n  notificationPriority: number | null;\n  sound: string | null;\n  sticky: boolean;\n  tag: string | null;\n  ticker: string | null;\n  title: string | null;\n  titleLocalizationArgs: string[] | null;\n  titleLocalizationKey: string | null;\n  vibrateTimings: number[] | null;\n  visibility: number | null;\n}\n\n/**\n * Represents a notification trigger that is unknown to `expo-notifications` and that it didn't know how to serialize for JS.\n */\nexport interface UnknownNotificationTrigger {\n  type: 'unknown';\n}\n\n/**\n * A union type containing different triggers which may cause the notification to be delivered to the application.\n */\nexport type NotificationTrigger =\n  | PushNotificationTrigger\n  | CalendarNotificationTrigger\n  | LocationNotificationTrigger\n  | TimeIntervalNotificationTrigger\n  | DailyNotificationTrigger\n  | WeeklyNotificationTrigger\n  | YearlyNotificationTrigger\n  | UnknownNotificationTrigger;\n\n/**\n * A trigger that will cause the notification to be delivered immediately.\n */\nexport type ChannelAwareTriggerInput = {\n  channelId: string;\n};\n\n// @docsMissing\nexport type CalendarTriggerInputValue = {\n  timezone?: string;\n  year?: number;\n  month?: number;\n  weekday?: number;\n  weekOfMonth?: number;\n  weekOfYear?: number;\n  weekdayOrdinal?: number;\n  day?: number;\n  hour?: number;\n  minute?: number;\n  second?: number;\n};\n\n/**\n * Calendar trigger inputs must have the \"type\" property set to one of these values\n */\nexport enum CalendarTriggerTypes {\n  CALENDAR = 'calendar',\n  DAILY = 'daily',\n  WEEKLY = 'weekly',\n  YEARLY = 'yearly',\n  DATE = 'date',\n  TIME_INTERVAL = 'timeInterval',\n}\n/**\n * A trigger that will cause the notification to be delivered once or many times when the date components match the specified values.\n * Corresponds to native [`UNCalendarNotificationTrigger`](https://developer.apple.com/documentation/usernotifications/uncalendarnotificationtrigger?language=objc).\n * @platform ios\n */\nexport type CalendarTriggerInput = CalendarTriggerInputValue & {\n  type: CalendarTriggerTypes.CALENDAR;\n  channelId?: string;\n  repeats?: boolean;\n};\n\n/**\n * A trigger that will cause the notification to be delivered once or many times (depends on the `repeats` field) after `seconds` time elapse.\n * > **On iOS**, when `repeats` is `true`, the time interval must be 60 seconds or greater. Otherwise, the notification won't be triggered.\n */\nexport interface TimeIntervalTriggerInput {\n  type: CalendarTriggerTypes.TIME_INTERVAL;\n  channelId?: string;\n  repeats?: boolean;\n  seconds: number;\n}\n\n/**\n * A trigger that will cause the notification to be delivered once per day.\n */\nexport interface DailyTriggerInput {\n  type: CalendarTriggerTypes.DAILY;\n  channelId?: string;\n  hour: number;\n  minute: number;\n}\n\n/**\n * A trigger that will cause the notification to be delivered once every week.\n * > **Note:** Weekdays are specified with a number from `1` through `7`, with `1` indicating Sunday.\n */\nexport interface WeeklyTriggerInput {\n  type: CalendarTriggerTypes.WEEKLY;\n  channelId?: string;\n  weekday: number;\n  hour: number;\n  minute: number;\n}\n\n/**\n * A trigger that will cause the notification to be delivered once every year.\n * > **Note:** all properties are specified in JavaScript Date's ranges.\n */\nexport interface YearlyTriggerInput {\n  type: CalendarTriggerTypes.YEARLY;\n  channelId?: string;\n  day: number;\n  month: number;\n  hour: number;\n  minute: number;\n}\n\n/**\n * A trigger that will cause the notification to be delivered once at the specified `Date`.\n * If you pass in a `number` it will be interpreted as a Unix timestamp.\n */\nexport type DateTriggerInput =\n  | Date\n  | number\n  | { type: CalendarTriggerTypes.DATE; channelId?: string; date: Date | number };\n\n/**\n * A type represents time-based, schedulable triggers. For these triggers you can check the next trigger date\n * with [`getNextTriggerDateAsync`](#notificationsgetnexttriggerdateasynctrigger).\n */\nexport type SchedulableNotificationTriggerInput =\n  | DateTriggerInput\n  | TimeIntervalTriggerInput\n  | DailyTriggerInput\n  | WeeklyTriggerInput\n  | YearlyTriggerInput\n  | CalendarTriggerInput;\n\n/**\n * A type represents possible triggers with which you can schedule notifications.\n * A `null` trigger means that the notification should be scheduled for delivery immediately.\n */\nexport type NotificationTriggerInput =\n  | null\n  | ChannelAwareTriggerInput\n  | SchedulableNotificationTriggerInput;\n\n/**\n * An enum corresponding to values appropriate for Android's [`Notification#priority`](https://developer.android.com/reference/android/app/Notification#priority) field.\n */\nexport enum AndroidNotificationPriority {\n  MIN = 'min',\n  LOW = 'low',\n  DEFAULT = 'default',\n  HIGH = 'high',\n  MAX = 'max',\n}\n\n/**\n * An object represents notification's content.\n */\nexport type NotificationContent = {\n  /**\n   * Notification title - the bold text displayed above the rest of the content.\n   */\n  title: string | null;\n  /**\n   * On Android: `subText` - the display depends on the device.\n   *\n   * On iOS: `subtitle` - the bold text displayed between title and the rest of the content.\n   */\n  subtitle: string | null;\n  /**\n   * Notification body - the main content of the notification.\n   */\n  body: string | null;\n  /**\n   * Data associated with the notification, not displayed\n   */\n  data: Record<string, any>;\n  // @docsMissing\n  sound: 'default' | 'defaultCritical' | 'custom' | null;\n} & (NotificationContentIos | NotificationContentAndroid);\n\n/**\n * See [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationcontent?language=objc) for more information on specific fields.\n */\nexport type NotificationContentIos = {\n  /**\n   * The name of the image or storyboard to use when your app launches because of the notification.\n   */\n  launchImageName: string | null;\n  /**\n   * The number that your app’s icon displays.\n   */\n  badge: number | null;\n  /**\n   * The visual and audio attachments to display alongside the notification’s main content.\n   */\n  attachments: NotificationContentAttachmentIos[];\n  /**\n   * The text the system adds to the notification summary to provide additional context.\n   */\n  summaryArgument?: string | null;\n  /**\n   * The number the system adds to the notification summary when the notification represents multiple items.\n   */\n  summaryArgumentCount?: number;\n  /**\n   * The identifier of the notification’s category.\n   */\n  categoryIdentifier: string | null;\n  /**\n   * The identifier that groups related notifications.\n   */\n  threadIdentifier: string | null;\n  /**\n   * The value your app uses to determine which scene to display to handle the notification.\n   */\n  targetContentIdentifier?: string;\n  /*\n   * The notification’s importance and required delivery timing.\n   * Posible values:\n   * - 'passive' - the system adds the notification to the notification list without lighting up the screen or playing a sound\n   * - 'active' - the system presents the notification immediately, lights up the screen, and can play a sound\n   * - 'timeSensitive' - The system presents the notification immediately, lights up the screen, can play a sound, and breaks through system notification controls\n   * - 'critical - the system presents the notification immediately, lights up the screen, and bypasses the mute switch to play a sound\n   * @platform ios 15+\n   */\n  interruptionLevel?: 'passive' | 'active' | 'timeSensitive' | 'critical';\n};\n\n// @docsMissing\n/**\n * @platform ios\n */\nexport type NotificationContentAttachmentIos = {\n  identifier: string | null;\n  url: string | null;\n  type: string | null;\n  typeHint?: string;\n  hideThumbnail?: boolean;\n  thumbnailClipArea?: { x: number; y: number; width: number; height: number };\n  thumbnailTime?: number;\n};\n\n/**\n * See [Android developer documentation](https://developer.android.com/reference/android/app/Notification#fields) for more information on specific fields.\n */\nexport type NotificationContentAndroid = {\n  /**\n   * Application badge number associated with the notification.\n   */\n  badge?: number;\n  /**\n   * Accent color (in `#AARRGGBB` or `#RRGGBB` format) to be applied by the standard Style templates when presenting this notification.\n   */\n  color?: string;\n  /**\n   * Relative priority for this notification. Priority is an indication of how much of the user's valuable attention should be consumed by this notification.\n   * Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification.\n   * The system will make a determination about how to interpret this priority when presenting the notification.\n   */\n  priority?: AndroidNotificationPriority;\n  /**\n   * The pattern with which to vibrate.\n   */\n  vibrationPattern?: number[];\n};\n\n/**\n * An object represents a request to present a notification. It has content — how it's being represented, and a trigger — what triggers the notification.\n * Many notifications ([`Notification`](#notification)) may be triggered with the same request (for example, a repeating notification).\n */\nexport interface NotificationRequest {\n  identifier: string;\n  content: NotificationContent;\n  trigger: NotificationTrigger;\n}\n\n// TODO(simek): asses if we can base this type on `NotificationContent`, since most of the fields looks like repetition\n/**\n * An object represents notification content that you pass in to `presentNotificationAsync` or as a part of `NotificationRequestInput`.\n */\nexport type NotificationContentInput = {\n  /**\n   * Notification title - the bold text displayed above the rest of the content.\n   */\n  title?: string | null;\n  /**\n   * On Android: `subText` - the display depends on the device.\n   *\n   * On iOS: `subtitle` - the bold text displayed between title and the rest of the content.\n   */\n  subtitle?: string | null;\n  /**\n   * The main content of the notification.\n   */\n  body?: string | null;\n  /**\n   * Data associated with the notification, not displayed.\n   */\n  data?: Record<string, any>;\n  /**\n   * Application badge number associated with the notification.\n   */\n  badge?: number;\n  sound?: boolean | string;\n  /**\n   * The name of the image or storyboard to use when your app launches because of the notification.\n   */\n  launchImageName?: string;\n  /**\n   * The pattern with which to vibrate.\n   * @platform android\n   */\n  vibrate?: number[];\n  /**\n   * Relative priority for this notification. Priority is an indication of how much of the user's valuable attention should be consumed by this notification.\n   * Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification.\n   * The system will make a determination about how to interpret this priority when presenting the notification.\n   * @platform android\n   */\n  priority?: string;\n  /**\n   * Accent color (in `#AARRGGBB` or `#RRGGBB` format) to be applied by the standard Style templates when presenting this notification.\n   * @platform android\n   */\n  color?: string;\n  /**\n   * If set to `false`, the notification will not be automatically dismissed when clicked.\n   * The setting will be used when the value is not provided or is invalid is set to `true`, and the notification\n   * will be dismissed automatically anyway. Corresponds directly to Android's `setAutoCancel` behavior.\n   *\n   * See [Android developer documentation](https://developer.android.com/reference/android/app/Notification.Builder#setAutoCancel(boolean))\n   * for more details.\n   * @platform android\n   */\n  autoDismiss?: boolean;\n  /**\n   * The identifier of the notification’s category.\n   * @platform ios\n   */\n  categoryIdentifier?: string;\n  /**\n   * If set to `true`, the notification cannot be dismissed by swipe. This setting defaults\n   * to `false` if not provided or is invalid. Corresponds directly do Android's `isOngoing` behavior.\n   * In Firebase terms this property of a notification is called `sticky`.\n   *\n   * See [Android developer documentation](https://developer.android.com/reference/android/app/Notification.Builder#setOngoing(boolean))\n   * and [Firebase documentation](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#AndroidNotification.FIELDS.sticky)\n   * for more details.\n   * @platform android\n   */\n  sticky?: boolean;\n  /**\n   * The visual and audio attachments to display alongside the notification’s main content.\n   * @platform ios\n   */\n  attachments?: NotificationContentAttachmentIos[];\n  /*\n   * The notification’s importance and required delivery timing.\n   * Posible values:\n   * - 'passive' - the system adds the notification to the notification list without lighting up the screen or playing a sound\n   * - 'active' - the system presents the notification immediately, lights up the screen, and can play a sound\n   * - 'timeSensitive' - The system presents the notification immediately, lights up the screen, can play a sound, and breaks through system notification controls\n   * - 'critical - the system presents the notification immediately, lights up the screen, and bypasses the mute switch to play a sound\n   * @platform ios 15+\n   */\n  interruptionLevel?: 'passive' | 'active' | 'timeSensitive' | 'critical';\n};\n\n/**\n * An object represents a notification request you can pass into `scheduleNotificationAsync`.\n */\nexport interface NotificationRequestInput {\n  identifier?: string;\n  content: NotificationContentInput;\n  trigger: NotificationTriggerInput;\n}\n\n/**\n * An object represents a single notification that has been triggered by some request ([`NotificationRequest`](#notificationrequest)) at some point in time.\n */\nexport interface Notification {\n  date: number;\n  request: NotificationRequest;\n}\n\n/**\n * An object represents user's interaction with the notification.\n * > **Note:** If the user taps on a notification `actionIdentifier` will be equal to [`Notifications.DEFAULT_ACTION_IDENTIFIER`](#notificationsdefault_action_identifier).\n */\nexport interface NotificationResponse {\n  notification: Notification;\n  actionIdentifier: string;\n  userText?: string;\n}\n\n/**\n * An object represents behavior that should be applied to the incoming notification.\n * > On Android, setting `shouldPlaySound: false` will result in the drop-down notification alert **not** showing, no matter what the priority is.\n * > This setting will also override any channel-specific sounds you may have configured.\n */\nexport interface NotificationBehavior {\n  shouldShowAlert: boolean;\n  shouldPlaySound: boolean;\n  shouldSetBadge: boolean;\n  priority?: AndroidNotificationPriority;\n}\n\nexport interface NotificationAction {\n  /**\n   * A unique string that identifies this action. If a user takes this action (for example, selects this button in the system's Notification UI),\n   * your app will receive this `actionIdentifier` via the [`NotificationResponseReceivedListener`](#addnotificationresponsereceivedlistenerlistener).\n   */\n  identifier: string;\n  /**\n   * The title of the button triggering this action.\n   */\n  buttonTitle: string;\n  /**\n   * Object which, if provided, will result in a button that prompts the user for a text response.\n   */\n  textInput?: {\n    /**\n     * A string which will be used as the title for the button used for submitting the text response.\n     * @platform ios\n     */\n    submitButtonTitle: string;\n    /**\n     * A string that serves as a placeholder until the user begins typing. Defaults to no placeholder string.\n     */\n    placeholder: string;\n  };\n  /**\n   * Object representing the additional configuration options.\n   */\n  options?: {\n    /**\n     * Boolean indicating whether the button title will be highlighted a different color (usually red).\n     * This usually signifies a destructive action such as deleting data.\n     * @platform ios\n     */\n    isDestructive?: boolean;\n    /**\n     * Boolean indicating whether triggering the action will require authentication from the user.\n     * @platform ios\n     */\n    isAuthenticationRequired?: boolean;\n    /**\n     * Boolean indicating whether triggering this action foregrounds the app.\n     * If `false` and your app is killed (not just backgrounded), [`NotificationResponseReceived` listeners](#addnotificationresponsereceivedlistenerlistener)\n     * will not be triggered when a user selects this action.\n     * @default true\n     */\n    opensAppToForeground?: boolean;\n  };\n}\n\n// @docsMissing\nexport interface NotificationCategory {\n  identifier: string;\n  actions: NotificationAction[];\n  options?: NotificationCategoryOptions;\n}\n\n/**\n * @platform ios\n */\nexport type NotificationCategoryOptions = {\n  /**\n   * Customizable placeholder for the notification preview text. This is shown if the user has disabled notification previews for the app.\n   * Defaults to the localized iOS system default placeholder (`Notification`).\n   */\n  previewPlaceholder?: string;\n  /**\n   * Array of [Intent Class Identifiers](https://developer.apple.com/documentation/sirikit/intent_class_identifiers). When a notification is delivered,\n   * the presence of an intent identifier lets the system know that the notification is potentially related to the handling of a request made through Siri.\n   * @default []\n   */\n  intentIdentifiers?: string[];\n  /**\n   * A format string for the summary description used when the system groups the category’s notifications.\n   */\n  categorySummaryFormat?: string;\n  /**\n   * A boolean indicating whether to send actions for handling when the notification is dismissed (the user must explicitly dismiss\n   * the notification interface - ignoring a notification or flicking away a notification banner does not trigger this action).\n   * @default false\n   */\n  customDismissAction?: boolean;\n  /**\n   * A boolean indicating whether to allow CarPlay to display notifications of this type. **Apps must be approved for CarPlay to make use of this feature.**\n   * @default false\n   */\n  allowInCarPlay?: boolean;\n  /**\n   * A boolean indicating whether to show the notification's title, even if the user has disabled notification previews for the app.\n   * @default false\n   */\n  showTitle?: boolean;\n  /**\n   * A boolean indicating whether to show the notification's subtitle, even if the user has disabled notification previews for the app.\n   * @default false\n   */\n  showSubtitle?: boolean;\n  /**\n   * A boolean indicating whether to allow notifications to be automatically read by Siri when the user is using AirPods.\n   * @default false\n   */\n  allowAnnouncement?: boolean;\n};\n\nexport type { Subscription, PermissionResponse, PermissionStatus, PermissionExpiration };\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-notifications/build/scheduleNotificationAsync.d.ts.map b/node_modules/expo-notifications/build/scheduleNotificationAsync.d.ts.map
index 004b820..fa48b02 100644
--- a/node_modules/expo-notifications/build/scheduleNotificationAsync.d.ts.map
+++ b/node_modules/expo-notifications/build/scheduleNotificationAsync.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"scheduleNotificationAsync.d.ts","sourceRoot":"","sources":["../src/scheduleNotificationAsync.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,wBAAwB,IAAI,8BAA8B,EAAE,MAAM,+BAA+B,CAAC;AAC3G,OAAO,EACL,wBAAwB,EACxB,wBAAwB,EASzB,MAAM,uBAAuB,CAAC;AAE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AACH,wBAA8B,yBAAyB,CACrD,OAAO,EAAE,wBAAwB,GAChC,OAAO,CAAC,MAAM,CAAC,CAUjB;AAoBD,wBAAgB,YAAY,CAC1B,iBAAiB,EAAE,wBAAwB,GAC1C,8BAA8B,CA4DhC"}
\ No newline at end of file
+{"version":3,"file":"scheduleNotificationAsync.d.ts","sourceRoot":"","sources":["../src/scheduleNotificationAsync.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,wBAAwB,IAAI,8BAA8B,EAAE,MAAM,+BAA+B,CAAC;AAC3G,OAAO,EACL,wBAAwB,EACxB,wBAAwB,EAUzB,MAAM,uBAAuB,CAAC;AAE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AACH,wBAA8B,yBAAyB,CACrD,OAAO,EAAE,wBAAwB,GAChC,OAAO,CAAC,MAAM,CAAC,CAUjB;AAoBD,wBAAgB,YAAY,CAC1B,iBAAiB,EAAE,wBAAwB,GAC1C,8BAA8B,CAwDhC"}
\ No newline at end of file
diff --git a/node_modules/expo-notifications/build/scheduleNotificationAsync.js b/node_modules/expo-notifications/build/scheduleNotificationAsync.js
index 52ef103..5b68c9f 100644
--- a/node_modules/expo-notifications/build/scheduleNotificationAsync.js
+++ b/node_modules/expo-notifications/build/scheduleNotificationAsync.js
@@ -1,5 +1,6 @@
 import { Platform, UnavailabilityError, uuid } from 'expo-modules-core';
 import NotificationScheduler from './NotificationScheduler';
+import { CalendarTriggerTypes, } from './Notifications.types';
 /**
  * Schedules a notification to be triggered in the future.
  * > **Note:** Please note that this does not mean that the notification will be presented when it is triggered.
@@ -116,10 +117,7 @@ export function parseTrigger(userFacingTrigger) {
             minute: userFacingTrigger.minute,
         };
     }
-    else if (isSecondsPropertyMisusedInCalendarTriggerInput(userFacingTrigger)) {
-        throw new TypeError('Could not have inferred the notification trigger type: if you want to use a time interval trigger, pass in only `seconds` with or without `repeats` property; if you want to use calendar-based trigger, pass in `second`.');
-    }
-    else if ('seconds' in userFacingTrigger) {
+    else if (isTimeIntervalTriggerInput(userFacingTrigger)) {
         return {
             type: 'timeInterval',
             channelId: userFacingTrigger.channelId,
@@ -140,12 +138,13 @@ export function parseTrigger(userFacingTrigger) {
 }
 function isCalendarTrigger(trigger) {
     const { channelId, ...triggerWithoutChannelId } = trigger;
-    return Object.keys(triggerWithoutChannelId).length > 0;
+    return ('type' in triggerWithoutChannelId &&
+        triggerWithoutChannelId.type === CalendarTriggerTypes.CALENDAR);
 }
 function isDateTrigger(trigger) {
     return (trigger instanceof Date ||
         typeof trigger === 'number' ||
-        (typeof trigger === 'object' && 'date' in trigger));
+        (typeof trigger === 'object' && trigger !== null && CalendarTriggerTypes.DATE in trigger));
 }
 function parseDateTrigger(trigger) {
     if (trigger instanceof Date || typeof trigger === 'number') {
@@ -166,8 +165,8 @@ function isDailyTriggerInput(trigger) {
     return (Object.keys(triggerWithoutChannelId).length ===
         DAILY_TRIGGER_EXPECTED_DATE_COMPONENTS.length + 1 &&
         DAILY_TRIGGER_EXPECTED_DATE_COMPONENTS.every((component) => component in triggerWithoutChannelId) &&
-        'repeats' in triggerWithoutChannelId &&
-        triggerWithoutChannelId.repeats === true);
+        'type' in triggerWithoutChannelId &&
+        triggerWithoutChannelId.type === CalendarTriggerTypes.DAILY);
 }
 function isWeeklyTriggerInput(trigger) {
     if (typeof trigger !== 'object')
@@ -176,8 +175,8 @@ function isWeeklyTriggerInput(trigger) {
     return (Object.keys(triggerWithoutChannelId).length ===
         WEEKLY_TRIGGER_EXPECTED_DATE_COMPONENTS.length + 1 &&
         WEEKLY_TRIGGER_EXPECTED_DATE_COMPONENTS.every((component) => component in triggerWithoutChannelId) &&
-        'repeats' in triggerWithoutChannelId &&
-        triggerWithoutChannelId.repeats === true);
+        'type' in triggerWithoutChannelId &&
+        triggerWithoutChannelId.type === CalendarTriggerTypes.WEEKLY);
 }
 function isYearlyTriggerInput(trigger) {
     if (typeof trigger !== 'object')
@@ -186,20 +185,16 @@ function isYearlyTriggerInput(trigger) {
     return (Object.keys(triggerWithoutChannelId).length ===
         YEARLY_TRIGGER_EXPECTED_DATE_COMPONENTS.length + 1 &&
         YEARLY_TRIGGER_EXPECTED_DATE_COMPONENTS.every((component) => component in triggerWithoutChannelId) &&
-        'repeats' in triggerWithoutChannelId &&
-        triggerWithoutChannelId.repeats === true);
+        'type' in triggerWithoutChannelId &&
+        triggerWithoutChannelId.type === CalendarTriggerTypes.YEARLY);
 }
-function isSecondsPropertyMisusedInCalendarTriggerInput(trigger) {
+function isTimeIntervalTriggerInput(trigger) {
+    if (typeof trigger !== 'object')
+        return false;
     const { channelId, ...triggerWithoutChannelId } = trigger;
-    return (
-    // eg. { seconds: ..., repeats: ..., hour: ... }
-    ('seconds' in triggerWithoutChannelId &&
-        'repeats' in triggerWithoutChannelId &&
-        Object.keys(triggerWithoutChannelId).length > 2) ||
-        // eg. { seconds: ..., hour: ... }
-        ('seconds' in triggerWithoutChannelId &&
-            !('repeats' in triggerWithoutChannelId) &&
-            Object.keys(triggerWithoutChannelId).length > 1));
+    return ('type' in triggerWithoutChannelId &&
+        triggerWithoutChannelId.type === CalendarTriggerTypes.TIME_INTERVAL &&
+        'seconds' in triggerWithoutChannelId);
 }
 function validateDateComponentsInTrigger(trigger, components) {
     const anyTriggerType = trigger;
diff --git a/node_modules/expo-notifications/build/scheduleNotificationAsync.js.map b/node_modules/expo-notifications/build/scheduleNotificationAsync.js.map
index 3de0f28..bf55427 100644
--- a/node_modules/expo-notifications/build/scheduleNotificationAsync.js.map
+++ b/node_modules/expo-notifications/build/scheduleNotificationAsync.js.map
@@ -1 +1 @@
-{"version":3,"file":"scheduleNotificationAsync.js","sourceRoot":"","sources":["../src/scheduleNotificationAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform, UnavailabilityError, uuid } from 'expo-modules-core';\n\nimport NotificationScheduler from './NotificationScheduler';\nimport { NotificationTriggerInput as NativeNotificationTriggerInput } from './NotificationScheduler.types';\nimport {\n  NotificationRequestInput,\n  NotificationTriggerInput,\n  DailyTriggerInput,\n  WeeklyTriggerInput,\n  YearlyTriggerInput,\n  CalendarTriggerInput,\n  TimeIntervalTriggerInput,\n  DateTriggerInput,\n  ChannelAwareTriggerInput,\n  SchedulableNotificationTriggerInput,\n} from './Notifications.types';\n\n/**\n * Schedules a notification to be triggered in the future.\n * > **Note:** Please note that this does not mean that the notification will be presented when it is triggered.\n * For the notification to be presented you have to set a notification handler with [`setNotificationHandler`](#notificationssetnotificationhandlerhandler)\n * that will return an appropriate notification behavior. For more information see the example below.\n * @param request An object describing the notification to be triggered.\n * @return Returns a Promise resolving to a string which is a notification identifier you can later use to cancel the notification or to identify an incoming notification.\n * @example\n * # Schedule the notification that will trigger once, in one minute from now\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * Notifications.scheduleNotificationAsync({\n *   content: {\n *     title: \"Time's up!\",\n *     body: 'Change sides!',\n *   },\n *   trigger: {\n *     seconds: 60,\n *   },\n * });\n * ```\n *\n * # Schedule the notification that will trigger repeatedly, every 20 minutes\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * Notifications.scheduleNotificationAsync({\n *   content: {\n *     title: 'Remember to drink water!',\n *   },\n *   trigger: {\n *     seconds: 60 * 20,\n *     repeats: true,\n *   },\n * });\n * ```\n *\n * # Schedule the notification that will trigger once, at the beginning of next hour\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * const trigger = new Date(Date.now() + 60 * 60 * 1000);\n * trigger.setMinutes(0);\n * trigger.setSeconds(0);\n *\n * Notifications.scheduleNotificationAsync({\n *   content: {\n *     title: 'Happy new hour!',\n *   },\n *   trigger,\n * });\n * ```\n * @header schedule\n */\nexport default async function scheduleNotificationAsync(\n  request: NotificationRequestInput\n): Promise<string> {\n  if (!NotificationScheduler.scheduleNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'scheduleNotificationAsync');\n  }\n\n  return await NotificationScheduler.scheduleNotificationAsync(\n    request.identifier ?? uuid.v4(),\n    request.content,\n    parseTrigger(request.trigger)\n  );\n}\n\ntype ValidTriggerDateComponents = 'month' | 'day' | 'weekday' | 'hour' | 'minute';\n\nconst DAILY_TRIGGER_EXPECTED_DATE_COMPONENTS: readonly ValidTriggerDateComponents[] = [\n  'hour',\n  'minute',\n];\nconst WEEKLY_TRIGGER_EXPECTED_DATE_COMPONENTS: readonly ValidTriggerDateComponents[] = [\n  'weekday',\n  'hour',\n  'minute',\n];\nconst YEARLY_TRIGGER_EXPECTED_DATE_COMPONENTS: readonly ValidTriggerDateComponents[] = [\n  'day',\n  'month',\n  'hour',\n  'minute',\n];\n\nexport function parseTrigger(\n  userFacingTrigger: NotificationTriggerInput\n): NativeNotificationTriggerInput {\n  if (userFacingTrigger === null) {\n    return null;\n  }\n\n  if (userFacingTrigger === undefined) {\n    throw new TypeError(\n      'Encountered an `undefined` notification trigger. If you want to trigger the notification immediately, pass in an explicit `null` value.'\n    );\n  }\n\n  if (isDateTrigger(userFacingTrigger)) {\n    return parseDateTrigger(userFacingTrigger);\n  } else if (isDailyTriggerInput(userFacingTrigger)) {\n    validateDateComponentsInTrigger(userFacingTrigger, DAILY_TRIGGER_EXPECTED_DATE_COMPONENTS);\n    return {\n      type: 'daily',\n      channelId: userFacingTrigger.channelId,\n      hour: userFacingTrigger.hour,\n      minute: userFacingTrigger.minute,\n    };\n  } else if (isWeeklyTriggerInput(userFacingTrigger)) {\n    validateDateComponentsInTrigger(userFacingTrigger, WEEKLY_TRIGGER_EXPECTED_DATE_COMPONENTS);\n    return {\n      type: 'weekly',\n      channelId: userFacingTrigger.channelId,\n      weekday: userFacingTrigger.weekday,\n      hour: userFacingTrigger.hour,\n      minute: userFacingTrigger.minute,\n    };\n  } else if (isYearlyTriggerInput(userFacingTrigger)) {\n    validateDateComponentsInTrigger(userFacingTrigger, YEARLY_TRIGGER_EXPECTED_DATE_COMPONENTS);\n    return {\n      type: 'yearly',\n      channelId: userFacingTrigger.channelId,\n      day: userFacingTrigger.day,\n      month: userFacingTrigger.month,\n      hour: userFacingTrigger.hour,\n      minute: userFacingTrigger.minute,\n    };\n  } else if (isSecondsPropertyMisusedInCalendarTriggerInput(userFacingTrigger)) {\n    throw new TypeError(\n      'Could not have inferred the notification trigger type: if you want to use a time interval trigger, pass in only `seconds` with or without `repeats` property; if you want to use calendar-based trigger, pass in `second`.'\n    );\n  } else if ('seconds' in userFacingTrigger) {\n    return {\n      type: 'timeInterval',\n      channelId: userFacingTrigger.channelId,\n      seconds: userFacingTrigger.seconds,\n      repeats: userFacingTrigger.repeats ?? false,\n    };\n  } else if (isCalendarTrigger(userFacingTrigger)) {\n    const { repeats, ...calendarTrigger } = userFacingTrigger;\n    return { type: 'calendar', value: calendarTrigger, repeats };\n  } else {\n    return Platform.select({\n      default: null, // There's no notion of channels on platforms other than Android.\n      android: { type: 'channel', channelId: userFacingTrigger.channelId },\n    });\n  }\n}\n\nfunction isCalendarTrigger(\n  trigger: CalendarTriggerInput | ChannelAwareTriggerInput\n): trigger is CalendarTriggerInput {\n  const { channelId, ...triggerWithoutChannelId } = trigger;\n  return Object.keys(triggerWithoutChannelId).length > 0;\n}\n\nfunction isDateTrigger(\n  trigger:\n    | DateTriggerInput\n    | WeeklyTriggerInput\n    | DailyTriggerInput\n    | CalendarTriggerInput\n    | TimeIntervalTriggerInput\n): trigger is DateTriggerInput {\n  return (\n    trigger instanceof Date ||\n    typeof trigger === 'number' ||\n    (typeof trigger === 'object' && 'date' in trigger)\n  );\n}\n\nfunction parseDateTrigger(trigger: DateTriggerInput): NativeNotificationTriggerInput {\n  if (trigger instanceof Date || typeof trigger === 'number') {\n    return { type: 'date', timestamp: toTimestamp(trigger) };\n  }\n  return { type: 'date', timestamp: toTimestamp(trigger.date), channelId: trigger.channelId };\n}\n\nfunction toTimestamp(date: number | Date) {\n  if (date instanceof Date) {\n    return date.getTime();\n  }\n  return date;\n}\n\nfunction isDailyTriggerInput(\n  trigger: SchedulableNotificationTriggerInput\n): trigger is DailyTriggerInput {\n  if (typeof trigger !== 'object') return false;\n  const { channelId, ...triggerWithoutChannelId } = trigger as DailyTriggerInput;\n  return (\n    Object.keys(triggerWithoutChannelId).length ===\n      DAILY_TRIGGER_EXPECTED_DATE_COMPONENTS.length + 1 &&\n    DAILY_TRIGGER_EXPECTED_DATE_COMPONENTS.every(\n      (component) => component in triggerWithoutChannelId\n    ) &&\n    'repeats' in triggerWithoutChannelId &&\n    triggerWithoutChannelId.repeats === true\n  );\n}\n\nfunction isWeeklyTriggerInput(\n  trigger: SchedulableNotificationTriggerInput\n): trigger is WeeklyTriggerInput {\n  if (typeof trigger !== 'object') return false;\n  const { channelId, ...triggerWithoutChannelId } = trigger as WeeklyTriggerInput;\n  return (\n    Object.keys(triggerWithoutChannelId).length ===\n      WEEKLY_TRIGGER_EXPECTED_DATE_COMPONENTS.length + 1 &&\n    WEEKLY_TRIGGER_EXPECTED_DATE_COMPONENTS.every(\n      (component) => component in triggerWithoutChannelId\n    ) &&\n    'repeats' in triggerWithoutChannelId &&\n    triggerWithoutChannelId.repeats === true\n  );\n}\n\nfunction isYearlyTriggerInput(\n  trigger: SchedulableNotificationTriggerInput\n): trigger is YearlyTriggerInput {\n  if (typeof trigger !== 'object') return false;\n  const { channelId, ...triggerWithoutChannelId } = trigger as YearlyTriggerInput;\n  return (\n    Object.keys(triggerWithoutChannelId).length ===\n      YEARLY_TRIGGER_EXPECTED_DATE_COMPONENTS.length + 1 &&\n    YEARLY_TRIGGER_EXPECTED_DATE_COMPONENTS.every(\n      (component) => component in triggerWithoutChannelId\n    ) &&\n    'repeats' in triggerWithoutChannelId &&\n    triggerWithoutChannelId.repeats === true\n  );\n}\n\nfunction isSecondsPropertyMisusedInCalendarTriggerInput(\n  trigger: TimeIntervalTriggerInput | CalendarTriggerInput\n) {\n  const { channelId, ...triggerWithoutChannelId } = trigger;\n  return (\n    // eg. { seconds: ..., repeats: ..., hour: ... }\n    ('seconds' in triggerWithoutChannelId &&\n      'repeats' in triggerWithoutChannelId &&\n      Object.keys(triggerWithoutChannelId).length > 2) ||\n    // eg. { seconds: ..., hour: ... }\n    ('seconds' in triggerWithoutChannelId &&\n      !('repeats' in triggerWithoutChannelId) &&\n      Object.keys(triggerWithoutChannelId).length > 1)\n  );\n}\n\nfunction validateDateComponentsInTrigger(\n  trigger: NonNullable<NotificationTriggerInput>,\n  components: readonly ValidTriggerDateComponents[]\n) {\n  const anyTriggerType = trigger as any;\n  components.forEach((component) => {\n    if (!(component in anyTriggerType)) {\n      throw new TypeError(`The ${component} parameter needs to be present`);\n    }\n    if (typeof anyTriggerType[component] !== 'number') {\n      throw new TypeError(`The ${component} parameter should be a number`);\n    }\n    switch (component) {\n      case 'month': {\n        const { month } = anyTriggerType;\n        if (month < 0 || month > 11) {\n          throw new RangeError(`The month parameter needs to be between 0 and 11. Found: ${month}`);\n        }\n        break;\n      }\n      case 'day': {\n        const { day, month } = anyTriggerType;\n        const daysInGivenMonth = daysInMonth(month);\n        if (day < 1 || day > daysInGivenMonth) {\n          throw new RangeError(\n            `The day parameter for month ${month} must be between 1 and ${daysInGivenMonth}. Found: ${day}`\n          );\n        }\n        break;\n      }\n      case 'weekday': {\n        const { weekday } = anyTriggerType;\n        if (weekday < 1 || weekday > 7) {\n          throw new RangeError(\n            `The weekday parameter needs to be between 1 and 7. Found: ${weekday}`\n          );\n        }\n        break;\n      }\n      case 'hour': {\n        const { hour } = anyTriggerType;\n        if (hour < 0 || hour > 23) {\n          throw new RangeError(`The hour parameter needs to be between 0 and 23. Found: ${hour}`);\n        }\n        break;\n      }\n      case 'minute': {\n        const { minute } = anyTriggerType;\n        if (minute < 0 || minute > 59) {\n          throw new RangeError(\n            `The minute parameter needs to be between 0 and 59. Found: ${minute}`\n          );\n        }\n        break;\n      }\n    }\n  });\n}\n\n/**\n * Determines the number of days in the given month (or January if omitted).\n * If year is specified, it will include leap year logic, else it will always assume a leap year\n */\nfunction daysInMonth(month: number = 0, year?: number) {\n  return new Date(year ?? 2000, month + 1, 0).getDate();\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"scheduleNotificationAsync.js","sourceRoot":"","sources":["../src/scheduleNotificationAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform, UnavailabilityError, uuid } from 'expo-modules-core';\n\nimport NotificationScheduler from './NotificationScheduler';\nimport { NotificationTriggerInput as NativeNotificationTriggerInput } from './NotificationScheduler.types';\nimport {\n  NotificationRequestInput,\n  NotificationTriggerInput,\n  DailyTriggerInput,\n  WeeklyTriggerInput,\n  YearlyTriggerInput,\n  CalendarTriggerInput,\n  TimeIntervalTriggerInput,\n  DateTriggerInput,\n  ChannelAwareTriggerInput,\n  SchedulableNotificationTriggerInput,\n  CalendarTriggerTypes,\n} from './Notifications.types';\n\n/**\n * Schedules a notification to be triggered in the future.\n * > **Note:** Please note that this does not mean that the notification will be presented when it is triggered.\n * For the notification to be presented you have to set a notification handler with [`setNotificationHandler`](#notificationssetnotificationhandlerhandler)\n * that will return an appropriate notification behavior. For more information see the example below.\n * @param request An object describing the notification to be triggered.\n * @return Returns a Promise resolving to a string which is a notification identifier you can later use to cancel the notification or to identify an incoming notification.\n * @example\n * # Schedule the notification that will trigger once, in one minute from now\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * Notifications.scheduleNotificationAsync({\n *   content: {\n *     title: \"Time's up!\",\n *     body: 'Change sides!',\n *   },\n *   trigger: {\n *     seconds: 60,\n *   },\n * });\n * ```\n *\n * # Schedule the notification that will trigger repeatedly, every 20 minutes\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * Notifications.scheduleNotificationAsync({\n *   content: {\n *     title: 'Remember to drink water!',\n *   },\n *   trigger: {\n *     seconds: 60 * 20,\n *     repeats: true,\n *   },\n * });\n * ```\n *\n * # Schedule the notification that will trigger once, at the beginning of next hour\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * const trigger = new Date(Date.now() + 60 * 60 * 1000);\n * trigger.setMinutes(0);\n * trigger.setSeconds(0);\n *\n * Notifications.scheduleNotificationAsync({\n *   content: {\n *     title: 'Happy new hour!',\n *   },\n *   trigger,\n * });\n * ```\n * @header schedule\n */\nexport default async function scheduleNotificationAsync(\n  request: NotificationRequestInput\n): Promise<string> {\n  if (!NotificationScheduler.scheduleNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'scheduleNotificationAsync');\n  }\n\n  return await NotificationScheduler.scheduleNotificationAsync(\n    request.identifier ?? uuid.v4(),\n    request.content,\n    parseTrigger(request.trigger)\n  );\n}\n\ntype ValidTriggerDateComponents = 'month' | 'day' | 'weekday' | 'hour' | 'minute';\n\nconst DAILY_TRIGGER_EXPECTED_DATE_COMPONENTS: readonly ValidTriggerDateComponents[] = [\n  'hour',\n  'minute',\n];\nconst WEEKLY_TRIGGER_EXPECTED_DATE_COMPONENTS: readonly ValidTriggerDateComponents[] = [\n  'weekday',\n  'hour',\n  'minute',\n];\nconst YEARLY_TRIGGER_EXPECTED_DATE_COMPONENTS: readonly ValidTriggerDateComponents[] = [\n  'day',\n  'month',\n  'hour',\n  'minute',\n];\n\nexport function parseTrigger(\n  userFacingTrigger: NotificationTriggerInput\n): NativeNotificationTriggerInput {\n  if (userFacingTrigger === null) {\n    return null;\n  }\n\n  if (userFacingTrigger === undefined) {\n    throw new TypeError(\n      'Encountered an `undefined` notification trigger. If you want to trigger the notification immediately, pass in an explicit `null` value.'\n    );\n  }\n\n  if (isDateTrigger(userFacingTrigger)) {\n    return parseDateTrigger(userFacingTrigger);\n  } else if (isDailyTriggerInput(userFacingTrigger)) {\n    validateDateComponentsInTrigger(userFacingTrigger, DAILY_TRIGGER_EXPECTED_DATE_COMPONENTS);\n    return {\n      type: 'daily',\n      channelId: userFacingTrigger.channelId,\n      hour: userFacingTrigger.hour,\n      minute: userFacingTrigger.minute,\n    };\n  } else if (isWeeklyTriggerInput(userFacingTrigger)) {\n    validateDateComponentsInTrigger(userFacingTrigger, WEEKLY_TRIGGER_EXPECTED_DATE_COMPONENTS);\n    return {\n      type: 'weekly',\n      channelId: userFacingTrigger.channelId,\n      weekday: userFacingTrigger.weekday,\n      hour: userFacingTrigger.hour,\n      minute: userFacingTrigger.minute,\n    };\n  } else if (isYearlyTriggerInput(userFacingTrigger)) {\n    validateDateComponentsInTrigger(userFacingTrigger, YEARLY_TRIGGER_EXPECTED_DATE_COMPONENTS);\n    return {\n      type: 'yearly',\n      channelId: userFacingTrigger.channelId,\n      day: userFacingTrigger.day,\n      month: userFacingTrigger.month,\n      hour: userFacingTrigger.hour,\n      minute: userFacingTrigger.minute,\n    };\n  } else if (isTimeIntervalTriggerInput(userFacingTrigger)) {\n    return {\n      type: 'timeInterval',\n      channelId: userFacingTrigger.channelId,\n      seconds: userFacingTrigger.seconds,\n      repeats: userFacingTrigger.repeats ?? false,\n    };\n  } else if (isCalendarTrigger(userFacingTrigger)) {\n    const { repeats, ...calendarTrigger } = userFacingTrigger;\n    return { type: 'calendar', value: calendarTrigger, repeats };\n  } else {\n    return Platform.select({\n      default: null, // There's no notion of channels on platforms other than Android.\n      android: { type: 'channel', channelId: userFacingTrigger.channelId },\n    });\n  }\n}\n\nfunction isCalendarTrigger(\n  trigger: CalendarTriggerInput | ChannelAwareTriggerInput\n): trigger is CalendarTriggerInput {\n  const { channelId, ...triggerWithoutChannelId } = trigger;\n  return (\n    'type' in triggerWithoutChannelId &&\n    triggerWithoutChannelId.type === CalendarTriggerTypes.CALENDAR\n  );\n}\n\nfunction isDateTrigger(trigger: NotificationTriggerInput): trigger is DateTriggerInput {\n  return (\n    trigger instanceof Date ||\n    typeof trigger === 'number' ||\n    (typeof trigger === 'object' && trigger !== null && CalendarTriggerTypes.DATE in trigger)\n  );\n}\n\nfunction parseDateTrigger(trigger: DateTriggerInput): NativeNotificationTriggerInput {\n  if (trigger instanceof Date || typeof trigger === 'number') {\n    return { type: 'date', timestamp: toTimestamp(trigger) };\n  }\n  return { type: 'date', timestamp: toTimestamp(trigger.date), channelId: trigger.channelId };\n}\n\nfunction toTimestamp(date: number | Date) {\n  if (date instanceof Date) {\n    return date.getTime();\n  }\n  return date;\n}\n\nfunction isDailyTriggerInput(trigger: NotificationTriggerInput): trigger is DailyTriggerInput {\n  if (typeof trigger !== 'object') return false;\n  const { channelId, ...triggerWithoutChannelId } = trigger as DailyTriggerInput;\n  return (\n    Object.keys(triggerWithoutChannelId).length ===\n      DAILY_TRIGGER_EXPECTED_DATE_COMPONENTS.length + 1 &&\n    DAILY_TRIGGER_EXPECTED_DATE_COMPONENTS.every(\n      (component) => component in triggerWithoutChannelId\n    ) &&\n    'type' in triggerWithoutChannelId &&\n    triggerWithoutChannelId.type === CalendarTriggerTypes.DAILY\n  );\n}\n\nfunction isWeeklyTriggerInput(trigger: NotificationTriggerInput): trigger is WeeklyTriggerInput {\n  if (typeof trigger !== 'object') return false;\n  const { channelId, ...triggerWithoutChannelId } = trigger as WeeklyTriggerInput;\n  return (\n    Object.keys(triggerWithoutChannelId).length ===\n      WEEKLY_TRIGGER_EXPECTED_DATE_COMPONENTS.length + 1 &&\n    WEEKLY_TRIGGER_EXPECTED_DATE_COMPONENTS.every(\n      (component) => component in triggerWithoutChannelId\n    ) &&\n    'type' in triggerWithoutChannelId &&\n    triggerWithoutChannelId.type === CalendarTriggerTypes.WEEKLY\n  );\n}\n\nfunction isYearlyTriggerInput(trigger: NotificationTriggerInput): trigger is YearlyTriggerInput {\n  if (typeof trigger !== 'object') return false;\n  const { channelId, ...triggerWithoutChannelId } = trigger as YearlyTriggerInput;\n  return (\n    Object.keys(triggerWithoutChannelId).length ===\n      YEARLY_TRIGGER_EXPECTED_DATE_COMPONENTS.length + 1 &&\n    YEARLY_TRIGGER_EXPECTED_DATE_COMPONENTS.every(\n      (component) => component in triggerWithoutChannelId\n    ) &&\n    'type' in triggerWithoutChannelId &&\n    triggerWithoutChannelId.type === CalendarTriggerTypes.YEARLY\n  );\n}\n\nfunction isTimeIntervalTriggerInput(\n  trigger: NotificationTriggerInput\n): trigger is TimeIntervalTriggerInput {\n  if (typeof trigger !== 'object') return false;\n  const { channelId, ...triggerWithoutChannelId } = trigger as TimeIntervalTriggerInput;\n  return (\n    'type' in triggerWithoutChannelId &&\n    triggerWithoutChannelId.type === CalendarTriggerTypes.TIME_INTERVAL &&\n    'seconds' in triggerWithoutChannelId\n  );\n}\n\nfunction validateDateComponentsInTrigger(\n  trigger: NonNullable<NotificationTriggerInput>,\n  components: readonly ValidTriggerDateComponents[]\n) {\n  const anyTriggerType = trigger as any;\n  components.forEach((component) => {\n    if (!(component in anyTriggerType)) {\n      throw new TypeError(`The ${component} parameter needs to be present`);\n    }\n    if (typeof anyTriggerType[component] !== 'number') {\n      throw new TypeError(`The ${component} parameter should be a number`);\n    }\n    switch (component) {\n      case 'month': {\n        const { month } = anyTriggerType;\n        if (month < 0 || month > 11) {\n          throw new RangeError(`The month parameter needs to be between 0 and 11. Found: ${month}`);\n        }\n        break;\n      }\n      case 'day': {\n        const { day, month } = anyTriggerType;\n        const daysInGivenMonth = daysInMonth(month);\n        if (day < 1 || day > daysInGivenMonth) {\n          throw new RangeError(\n            `The day parameter for month ${month} must be between 1 and ${daysInGivenMonth}. Found: ${day}`\n          );\n        }\n        break;\n      }\n      case 'weekday': {\n        const { weekday } = anyTriggerType;\n        if (weekday < 1 || weekday > 7) {\n          throw new RangeError(\n            `The weekday parameter needs to be between 1 and 7. Found: ${weekday}`\n          );\n        }\n        break;\n      }\n      case 'hour': {\n        const { hour } = anyTriggerType;\n        if (hour < 0 || hour > 23) {\n          throw new RangeError(`The hour parameter needs to be between 0 and 23. Found: ${hour}`);\n        }\n        break;\n      }\n      case 'minute': {\n        const { minute } = anyTriggerType;\n        if (minute < 0 || minute > 59) {\n          throw new RangeError(\n            `The minute parameter needs to be between 0 and 59. Found: ${minute}`\n          );\n        }\n        break;\n      }\n    }\n  });\n}\n\n/**\n * Determines the number of days in the given month (or January if omitted).\n * If year is specified, it will include leap year logic, else it will always assume a leap year\n */\nfunction daysInMonth(month: number = 0, year?: number) {\n  return new Date(year ?? 2000, month + 1, 0).getDate();\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-notifications/src/Notifications.types.ts b/node_modules/expo-notifications/src/Notifications.types.ts
index d8c9cb9..9189489 100644
--- a/node_modules/expo-notifications/src/Notifications.types.ts
+++ b/node_modules/expo-notifications/src/Notifications.types.ts
@@ -268,12 +268,24 @@ export type CalendarTriggerInputValue = {
   second?: number;
 };
 
+/**
+ * Calendar trigger inputs must have the "type" property set to one of these values
+ */
+export enum CalendarTriggerTypes {
+  CALENDAR = 'calendar',
+  DAILY = 'daily',
+  WEEKLY = 'weekly',
+  YEARLY = 'yearly',
+  DATE = 'date',
+  TIME_INTERVAL = 'timeInterval',
+}
 /**
  * A trigger that will cause the notification to be delivered once or many times when the date components match the specified values.
  * Corresponds to native [`UNCalendarNotificationTrigger`](https://developer.apple.com/documentation/usernotifications/uncalendarnotificationtrigger?language=objc).
  * @platform ios
  */
 export type CalendarTriggerInput = CalendarTriggerInputValue & {
+  type: CalendarTriggerTypes.CALENDAR;
   channelId?: string;
   repeats?: boolean;
 };
@@ -283,6 +295,7 @@ export type CalendarTriggerInput = CalendarTriggerInputValue & {
  * > **On iOS**, when `repeats` is `true`, the time interval must be 60 seconds or greater. Otherwise, the notification won't be triggered.
  */
 export interface TimeIntervalTriggerInput {
+  type: CalendarTriggerTypes.TIME_INTERVAL;
   channelId?: string;
   repeats?: boolean;
   seconds: number;
@@ -292,10 +305,10 @@ export interface TimeIntervalTriggerInput {
  * A trigger that will cause the notification to be delivered once per day.
  */
 export interface DailyTriggerInput {
+  type: CalendarTriggerTypes.DAILY;
   channelId?: string;
   hour: number;
   minute: number;
-  repeats: true;
 }
 
 /**
@@ -303,11 +316,11 @@ export interface DailyTriggerInput {
  * > **Note:** Weekdays are specified with a number from `1` through `7`, with `1` indicating Sunday.
  */
 export interface WeeklyTriggerInput {
+  type: CalendarTriggerTypes.WEEKLY;
   channelId?: string;
   weekday: number;
   hour: number;
   minute: number;
-  repeats: true;
 }
 
 /**
@@ -315,19 +328,22 @@ export interface WeeklyTriggerInput {
  * > **Note:** all properties are specified in JavaScript Date's ranges.
  */
 export interface YearlyTriggerInput {
+  type: CalendarTriggerTypes.YEARLY;
   channelId?: string;
   day: number;
   month: number;
   hour: number;
   minute: number;
-  repeats: true;
 }
 
 /**
  * A trigger that will cause the notification to be delivered once at the specified `Date`.
  * If you pass in a `number` it will be interpreted as a Unix timestamp.
  */
-export type DateTriggerInput = Date | number | { channelId?: string; date: Date | number };
+export type DateTriggerInput =
+  | Date
+  | number
+  | { type: CalendarTriggerTypes.DATE; channelId?: string; date: Date | number };
 
 /**
  * A type represents time-based, schedulable triggers. For these triggers you can check the next trigger date
diff --git a/node_modules/expo-notifications/src/scheduleNotificationAsync.ts b/node_modules/expo-notifications/src/scheduleNotificationAsync.ts
index d8b66cc..5d497c9 100644
--- a/node_modules/expo-notifications/src/scheduleNotificationAsync.ts
+++ b/node_modules/expo-notifications/src/scheduleNotificationAsync.ts
@@ -13,6 +13,7 @@ import {
   DateTriggerInput,
   ChannelAwareTriggerInput,
   SchedulableNotificationTriggerInput,
+  CalendarTriggerTypes,
 } from './Notifications.types';
 
 /**
@@ -144,11 +145,7 @@ export function parseTrigger(
       hour: userFacingTrigger.hour,
       minute: userFacingTrigger.minute,
     };
-  } else if (isSecondsPropertyMisusedInCalendarTriggerInput(userFacingTrigger)) {
-    throw new TypeError(
-      'Could not have inferred the notification trigger type: if you want to use a time interval trigger, pass in only `seconds` with or without `repeats` property; if you want to use calendar-based trigger, pass in `second`.'
-    );
-  } else if ('seconds' in userFacingTrigger) {
+  } else if (isTimeIntervalTriggerInput(userFacingTrigger)) {
     return {
       type: 'timeInterval',
       channelId: userFacingTrigger.channelId,
@@ -170,21 +167,17 @@ function isCalendarTrigger(
   trigger: CalendarTriggerInput | ChannelAwareTriggerInput
 ): trigger is CalendarTriggerInput {
   const { channelId, ...triggerWithoutChannelId } = trigger;
-  return Object.keys(triggerWithoutChannelId).length > 0;
+  return (
+    'type' in triggerWithoutChannelId &&
+    triggerWithoutChannelId.type === CalendarTriggerTypes.CALENDAR
+  );
 }
 
-function isDateTrigger(
-  trigger:
-    | DateTriggerInput
-    | WeeklyTriggerInput
-    | DailyTriggerInput
-    | CalendarTriggerInput
-    | TimeIntervalTriggerInput
-): trigger is DateTriggerInput {
+function isDateTrigger(trigger: NotificationTriggerInput): trigger is DateTriggerInput {
   return (
     trigger instanceof Date ||
     typeof trigger === 'number' ||
-    (typeof trigger === 'object' && 'date' in trigger)
+    (typeof trigger === 'object' && trigger !== null && CalendarTriggerTypes.DATE in trigger)
   );
 }
 
@@ -202,9 +195,7 @@ function toTimestamp(date: number | Date) {
   return date;
 }
 
-function isDailyTriggerInput(
-  trigger: SchedulableNotificationTriggerInput
-): trigger is DailyTriggerInput {
+function isDailyTriggerInput(trigger: NotificationTriggerInput): trigger is DailyTriggerInput {
   if (typeof trigger !== 'object') return false;
   const { channelId, ...triggerWithoutChannelId } = trigger as DailyTriggerInput;
   return (
@@ -213,14 +204,12 @@ function isDailyTriggerInput(
     DAILY_TRIGGER_EXPECTED_DATE_COMPONENTS.every(
       (component) => component in triggerWithoutChannelId
     ) &&
-    'repeats' in triggerWithoutChannelId &&
-    triggerWithoutChannelId.repeats === true
+    'type' in triggerWithoutChannelId &&
+    triggerWithoutChannelId.type === CalendarTriggerTypes.DAILY
   );
 }
 
-function isWeeklyTriggerInput(
-  trigger: SchedulableNotificationTriggerInput
-): trigger is WeeklyTriggerInput {
+function isWeeklyTriggerInput(trigger: NotificationTriggerInput): trigger is WeeklyTriggerInput {
   if (typeof trigger !== 'object') return false;
   const { channelId, ...triggerWithoutChannelId } = trigger as WeeklyTriggerInput;
   return (
@@ -229,14 +218,12 @@ function isWeeklyTriggerInput(
     WEEKLY_TRIGGER_EXPECTED_DATE_COMPONENTS.every(
       (component) => component in triggerWithoutChannelId
     ) &&
-    'repeats' in triggerWithoutChannelId &&
-    triggerWithoutChannelId.repeats === true
+    'type' in triggerWithoutChannelId &&
+    triggerWithoutChannelId.type === CalendarTriggerTypes.WEEKLY
   );
 }
 
-function isYearlyTriggerInput(
-  trigger: SchedulableNotificationTriggerInput
-): trigger is YearlyTriggerInput {
+function isYearlyTriggerInput(trigger: NotificationTriggerInput): trigger is YearlyTriggerInput {
   if (typeof trigger !== 'object') return false;
   const { channelId, ...triggerWithoutChannelId } = trigger as YearlyTriggerInput;
   return (
@@ -245,24 +232,20 @@ function isYearlyTriggerInput(
     YEARLY_TRIGGER_EXPECTED_DATE_COMPONENTS.every(
       (component) => component in triggerWithoutChannelId
     ) &&
-    'repeats' in triggerWithoutChannelId &&
-    triggerWithoutChannelId.repeats === true
+    'type' in triggerWithoutChannelId &&
+    triggerWithoutChannelId.type === CalendarTriggerTypes.YEARLY
   );
 }
 
-function isSecondsPropertyMisusedInCalendarTriggerInput(
-  trigger: TimeIntervalTriggerInput | CalendarTriggerInput
-) {
-  const { channelId, ...triggerWithoutChannelId } = trigger;
+function isTimeIntervalTriggerInput(
+  trigger: NotificationTriggerInput
+): trigger is TimeIntervalTriggerInput {
+  if (typeof trigger !== 'object') return false;
+  const { channelId, ...triggerWithoutChannelId } = trigger as TimeIntervalTriggerInput;
   return (
-    // eg. { seconds: ..., repeats: ..., hour: ... }
-    ('seconds' in triggerWithoutChannelId &&
-      'repeats' in triggerWithoutChannelId &&
-      Object.keys(triggerWithoutChannelId).length > 2) ||
-    // eg. { seconds: ..., hour: ... }
-    ('seconds' in triggerWithoutChannelId &&
-      !('repeats' in triggerWithoutChannelId) &&
-      Object.keys(triggerWithoutChannelId).length > 1)
+    'type' in triggerWithoutChannelId &&
+    triggerWithoutChannelId.type === CalendarTriggerTypes.TIME_INTERVAL &&
+    'seconds' in triggerWithoutChannelId
   );
 }
 
