diff --git a/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/notifications/emitting/NotificationsEmitter.kt b/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/notifications/emitting/NotificationsEmitter.kt
index 07f3a3d..3dcc0a4 100644
--- a/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/notifications/emitting/NotificationsEmitter.kt
+++ b/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/notifications/emitting/NotificationsEmitter.kt
@@ -1,6 +1,7 @@
 package expo.modules.notifications.notifications.emitting
 
 import android.os.Bundle
+import android.util.Log
 import expo.modules.kotlin.modules.Module
 import expo.modules.kotlin.modules.ModuleDefinition
 import expo.modules.notifications.notifications.NotificationSerializer
@@ -49,7 +50,10 @@ open class NotificationsEmitter : Module(), NotificationListener {
    * @param notification Notification received
    */
   override fun onNotificationReceived(notification: Notification) {
-    sendEvent(NEW_MESSAGE_EVENT_NAME, NotificationSerializer.toBundle(notification))
+    Log.i("ReactNativeJS", "onNotificationReceived:")
+    val bundle = NotificationSerializer.toBundle(notification)
+    logBundle(bundle)
+    sendEvent(NEW_MESSAGE_EVENT_NAME, bundle)
   }
 
   /**
@@ -60,13 +64,19 @@ open class NotificationsEmitter : Module(), NotificationListener {
    * @return Whether notification has been handled
    */
   override fun onNotificationResponseReceived(response: NotificationResponse): Boolean {
-    lastNotificationResponseBundle = NotificationSerializer.toBundle(response)
+    Log.i("ReactNativeJS", "onNotificationResponseReceived:")
+    val bundle = NotificationSerializer.toBundle(response)
+    logBundle(bundle);
+    lastNotificationResponseBundle = bundle
     sendEvent(NEW_RESPONSE_EVENT_NAME, lastNotificationResponseBundle)
     return true
   }
 
   override fun onNotificationResponseIntentReceived(extras: Bundle?) {
-    lastNotificationResponseBundle = NotificationSerializer.toResponseBundleFromExtras(extras)
+    Log.i("ReactNativeJS", "onNotificationResponseIntentReceived:")
+    val bundle = NotificationSerializer.toResponseBundleFromExtras(extras)
+    logBundle(bundle);
+    lastNotificationResponseBundle = bundle
     sendEvent(NEW_RESPONSE_EVENT_NAME, lastNotificationResponseBundle)
   }
 
@@ -77,4 +87,29 @@ open class NotificationsEmitter : Module(), NotificationListener {
   override fun onNotificationsDropped() {
     sendEvent(MESSAGES_DELETED_EVENT_NAME, Bundle.EMPTY)
   }
+
+  private fun logBundle(bundleToLog: Bundle) {
+    return logBundle("", bundleToLog)
+  }
+
+  private fun logBundle(indent: String, bundleToLog: Bundle) {
+    if (indent.equals("        ")) {
+      return;
+    }
+    bundleToLog.keySet().forEach {
+      val value = bundleToLog.get(it)
+      if (value is Bundle) {
+        val childIndent = "${indent}  "
+        Log.i("ReactNativeJS", "${indent}${it}:")
+        logBundle(childIndent, value)
+      } else {
+        val stringValue = when (value) {
+          null -> "(null)"
+          else -> "${value}"
+        }
+        Log.i("ReactNativeJS", "${indent}${it}: ${stringValue}")
+      }
+    }
+  }
 }
+
diff --git a/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/NotificationsService.kt b/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/NotificationsService.kt
index c957a9e..2a4ff82 100644
--- a/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/NotificationsService.kt
+++ b/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/NotificationsService.kt
@@ -645,6 +645,7 @@ open class NotificationsService : BroadcastReceiver() {
         receiver?.send(SUCCESS_CODE, resultData)
       } catch (e: Exception) {
         Log.e("expo-notifications", "Action ${intent.action} failed: ${e.message}")
+        Log.e("ReactNativeJS", "Action ${intent.action} failed: ${e.message}\n${e.stackTraceToString()}")
         e.printStackTrace()
 
         receiver?.send(ERROR_CODE, Bundle().also { it.putSerializable(EXCEPTION_KEY, e) })
diff --git a/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/delegates/FirebaseMessagingDelegate.kt b/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/delegates/FirebaseMessagingDelegate.kt
index 55b3a8d..3ed1e16 100644
--- a/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/delegates/FirebaseMessagingDelegate.kt
+++ b/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/delegates/FirebaseMessagingDelegate.kt
@@ -1,6 +1,10 @@
 package expo.modules.notifications.service.delegates
 
 import android.content.Context
+import android.os.Build
+import android.os.Bundle
+import android.util.Log
+import androidx.annotation.RequiresApi
 import com.google.firebase.messaging.RemoteMessage
 import expo.modules.notifications.notifications.JSONNotificationContentBuilder
 import expo.modules.notifications.notifications.RemoteMessageSerializer
@@ -12,6 +16,7 @@ import expo.modules.notifications.notifications.model.triggers.FirebaseNotificat
 import expo.modules.notifications.service.NotificationsService
 import expo.modules.notifications.service.interfaces.FirebaseMessagingDelegate
 import expo.modules.notifications.tokens.interfaces.FirebaseTokenListener
+import org.json.JSONArray
 import org.json.JSONObject
 import java.lang.ref.WeakReference
 import java.util.*
@@ -72,6 +77,32 @@ open class FirebaseMessagingDelegate(protected val context: Context) : FirebaseM
       }
       sBackgroundTaskConsumerReferences[taskConsumer] = WeakReference(taskConsumer)
     }
+
+    fun logMessage(caller: String, message: RemoteMessage) {
+      Log.i("ReactNativeJS", "${caller}:")
+      Log.i("ReactNativeJS", "  notification.channelId: ${message.notification?.channelId}")
+      Log.i("ReactNativeJS", "  notification.vibrateTimings: ${message.notification?.vibrateTimings?.contentToString()}")
+      Log.i("ReactNativeJS", "  notification.body: ${message.notification?.body}")
+      Log.i("ReactNativeJS", "  notification.color: ${message.notification?.color}")
+      Log.i("ReactNativeJS", "  notification.sound: ${message.notification?.sound}")
+      Log.i("ReactNativeJS", "  notification.title: ${message.notification?.title}")
+      Log.i("ReactNativeJS", "  notification.collapseKey: ${message.collapseKey}")
+      Log.i("ReactNativeJS", "  data: ${message.data}")
+    }
+
+    @RequiresApi(Build.VERSION_CODES.O)
+    fun logNotification(caller: String, notification: Notification) {
+      Log.i("ReactNativeJS", "${caller}:")
+      Log.i("ReactNativeJS", "  notification.notificationRequest.content.title: ${notification.notificationRequest.content.title}")
+      Log.i("ReactNativeJS", "  notification.notificationRequest.content.subtitle: ${notification.notificationRequest.content.subtitle}")
+      Log.i("ReactNativeJS", "  notification.notificationRequest.content.text: ${notification.notificationRequest.content.text}")
+      Log.i("ReactNativeJS", "  notification.notificationRequest.content.sound: ${notification.notificationRequest.content.sound}")
+      Log.i("ReactNativeJS", "  notification.notificationRequest.content.body: ${notification.notificationRequest.content.body}")
+      Log.i("ReactNativeJS", "  notification.notificationRequest.content.color: ${notification.notificationRequest.content.color}")
+      Log.i("ReactNativeJS", "  notification.notificationRequest.content.vibrationPattern: ${notification.notificationRequest.content.vibrationPattern.contentToString()}")
+      Log.i("ReactNativeJS", "  notification.notificationRequest.trigger.notificationChannel: ${notification.notificationRequest.trigger.notificationChannel}")
+      Log.i("ReactNativeJS", "  notification.notificationRequest.identifier: ${notification.notificationRequest.identifier}")
+    }
   }
 
   /**
@@ -89,7 +120,12 @@ open class FirebaseMessagingDelegate(protected val context: Context) : FirebaseM
   fun getBackgroundTasks() = sBackgroundTaskConsumerReferences.values.mapNotNull { it.get() }
 
   override fun onMessageReceived(remoteMessage: RemoteMessage) {
-    NotificationsService.receive(context, createNotification(remoteMessage))
+    logMessage("FirebaseMessagingDelegate.onMessageReceived: message", remoteMessage)
+    val notification = createNotification(remoteMessage)
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+      logNotification("FirebaseMessagingDelegate.onMessageReceived: notification", notification)
+    }
+    NotificationsService.receive(context, notification)
     getBackgroundTasks().forEach {
       it.scheduleJob(RemoteMessageSerializer.toBundle(remoteMessage))
     }
@@ -98,6 +134,14 @@ open class FirebaseMessagingDelegate(protected val context: Context) : FirebaseM
   protected fun createNotification(remoteMessage: RemoteMessage): Notification {
     val identifier = getNotificationIdentifier(remoteMessage)
     val payload = JSONObject(remoteMessage.data as Map<*, *>)
+    val vibrationPattern = remoteMessage.notification?.vibrateTimings
+    if (vibrationPattern != null) {
+      val jsonVibrationTimings = JSONArray()
+      vibrationPattern.forEach {
+        jsonVibrationTimings.put(it)
+      }
+      payload.put("vibrate", jsonVibrationTimings)
+    }
     val content = JSONNotificationContentBuilder(context).setPayload(payload).build()
     val request = createNotificationRequest(identifier, content, FirebaseNotificationTrigger(remoteMessage))
     return Notification(request, Date(remoteMessage.sentTime))
