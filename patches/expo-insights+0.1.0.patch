diff --git a/node_modules/expo-insights/build/index.js b/node_modules/expo-insights/build/index.js
index 2fe05b2..1ade657 100644
--- a/node_modules/expo-insights/build/index.js
+++ b/node_modules/expo-insights/build/index.js
@@ -1,2 +1,2 @@
-export default {};
-//# sourceMappingURL=index.js.map
\ No newline at end of file
+import { requireNativeModule } from 'expo-modules-core';
+export default requireNativeModule('ExpoInsights');
diff --git a/node_modules/expo-insights/ios/InsightsModule.swift b/node_modules/expo-insights/ios/InsightsModule.swift
index c77e4dd..ab32b45 100644
--- a/node_modules/expo-insights/ios/InsightsModule.swift
+++ b/node_modules/expo-insights/ios/InsightsModule.swift
@@ -21,6 +21,18 @@ public final class InsightsModule: Module {
         }
       }
     }
+    
+    Function("getDebugConfig", { () -> [String: String?] in
+      guard let manifest = appContext?.constants?.constants()["manifest"] as? [String: Any] else {
+        log.warn("Insights: Unable to read the manifest")
+        return ["error": "Unable to read the manifest"]
+      }
+      guard let projectId = getProjectId(manifest: manifest) else {
+        log.warn("Insights: Unable to get the project ID")
+        return ["error": "Unable to get the project ID"]
+      }
+      return getLaunchEventData(projectId: projectId)
+    })
   }
 
   /**
@@ -78,6 +90,7 @@ private func dispatchEvent(projectId: String, eventName: String, data: [String:
     log.warn("Insights: Server responded with status code \(response.statusCode) for event \(eventName)")
     return
   }
+  log.info("Insights: Response status code \(response.statusCode)")
 }
 
 /**
@@ -100,7 +113,7 @@ private func getLaunchEventData(projectId: String) -> [String: String?] {
     "event_name": "APP_LAUNCH",
     "eas_client_id": EASClientID.uuid().uuidString,
     "project_id": projectId,
-    "app_version": info?["CFBundleVersion"] as? String,
+    "app_version": info?["CFBundleShortVersionString"] as? String,
     "platform": "iOS",
     "os_version": UIDevice.current.systemVersion
   ]
